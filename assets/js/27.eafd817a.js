(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{299:function(e,t,a){"use strict";a.r(t);var r=a(14),v=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#vue"}},[e._v("Vue")]),t("ul",[t("li",[t("a",{attrs:{href:"#_1-生命周期"}},[e._v("1.生命周期?")])]),t("li",[t("a",{attrs:{href:"#_2-v-if和v-show的区别"}},[e._v("2.v-if和v-show的区别？")])]),t("li",[t("a",{attrs:{href:"#_3-vue组件封装-全局可用"}},[e._v("3.vue组件封装 全局可用？")])]),t("li",[t("a",{attrs:{href:"#_4-vue中的data为什么是个函数"}},[e._v("4.vue中的data为什么是个函数？")])]),t("li",[t("a",{attrs:{href:"#_5-深度监听"}},[e._v("5.深度监听？")])]),t("li",[t("a",{attrs:{href:"#_6-keep-alive作用"}},[e._v("6.keep-alive作用？")])]),t("li",[t("a",{attrs:{href:"#_7-vue-router传参"}},[e._v("7.vue-router传参？")])]),t("li",[t("a",{attrs:{href:"#_8-vue的数据流"}},[e._v("8.vue的数据流？")])]),t("li",[t("a",{attrs:{href:"#_9-v-router路由守卫有哪些参数-如何实现"}},[e._v("9.v-router路由守卫有哪些参数，如何实现？")])]),t("li",[t("a",{attrs:{href:"#_10-vuex有哪些参数-作用"}},[e._v("10.vuex有哪些参数，作用？")])]),t("li",[t("a",{attrs:{href:"#_11-mvvm模型的理解及与mvc区别-vue-mvvm-当model变化会触发view更新"}},[e._v("11.mvvm模型的理解及与MVC区别 => vue-mvvm 当model变化会触发view更新？")])]),t("li",[t("a",{attrs:{href:"#_12-v-for为什么一定要绑定key"}},[e._v("12.v-for为什么一定要绑定key？")])]),t("li",[t("a",{attrs:{href:"#_13-vue的inject和eventbus"}},[e._v("13.vue的inject和eventbus？")])]),t("li",[t("a",{attrs:{href:"#_14-vue2和vue3响应式原理实现差异"}},[e._v("14.vue2和vue3响应式原理实现差异？")])]),t("li",[t("a",{attrs:{href:"#_15-v-model可以用什么替代"}},[e._v("15.v-model可以用什么替代?")])]),t("li",[t("a",{attrs:{href:"#_16-vue组件销毁-所有自定义事件-emit-on定义的事件-和原生事件都会解绑吗"}},[e._v("16.vue组件销毁，所有自定义事件($emit，$on定义的事件)和原生事件都会解绑吗?")])]),t("li",[t("a",{attrs:{href:"#_17-vue怎么区分开发环境和生产环境"}},[e._v("17.vue怎么区分开发环境和生产环境？")])]),t("li",[t("a",{attrs:{href:"#_18-如何设置css只在当前组件起作用"}},[e._v("18.如何设置css只在当前组件起作用？")])]),t("li",[t("a",{attrs:{href:"#_19-todo"}},[e._v("19.// TODO")])]),t("li",[t("a",{attrs:{href:"#_20-route和router有什么区别"}},[e._v("20.route和router有什么区别？")])]),t("li",[t("a",{attrs:{href:"#_21-vue是挂载在哪个标签上"}},[e._v("21.vue是挂载在哪个标签上？")])]),t("li",[t("a",{attrs:{href:"#_22-computed和watch区别是什么"}},[e._v("22.computed和watch区别是什么？")])]),t("li",[t("a",{attrs:{href:"#_23-vue模版编译原理-为什么要用template"}},[e._v("23.vue模版编译原理？为什么要用template？")])]),t("li",[t("a",{attrs:{href:"#_24-vue的挂载过程"}},[e._v("24.vue的挂载过程？")])]),t("li",[t("a",{attrs:{href:"#_25-说说组件传值的几种方式"}},[e._v("25.说说组件传值的几种方式？")])]),t("li",[t("a",{attrs:{href:"#_26-如何解决vue初始化页面闪动问题"}},[e._v("26.如何解决vue初始化页面闪动问题？")])]),t("li",[t("a",{attrs:{href:"#_27-什么是spa-有什么优点和缺点"}},[e._v("27.什么是SPA，有什么优点和缺点？")])]),t("li",[t("a",{attrs:{href:"#_28-在哪个生命周期发起数据请求"}},[e._v("28.在哪个生命周期发起数据请求？")])]),t("li",[t("a",{attrs:{href:"#_29-vue-router的几种模式-hash和history有什么区别"}},[e._v("29.vue-router的几种模式?hash和history有什么区别？")])]),t("li",[t("a",{attrs:{href:"#_30-vue数据频繁变化-为什么只以最后一次为准"}},[e._v("30.vue数据频繁变化，为什么只以最后一次为准？")])]),t("li",[t("a",{attrs:{href:"#_31-vue和react区别"}},[e._v("31.vue和react区别？")])]),t("li",[t("a",{attrs:{href:"#_32-v-html有什么问题"}},[e._v("32.v-html有什么问题？")])]),t("li",[t("a",{attrs:{href:"#_33-v-if和v-for为什么不建议混合使用"}},[e._v("33.v-if和v-for为什么不建议混合使用？")])]),t("li",[t("a",{attrs:{href:"#_34-vue2和vue3区别"}},[e._v("34.vue2和vue3区别？")])]),t("li",[t("a",{attrs:{href:"#_35-计算属性-computed-和实例方法-method-有什么区别"}},[e._v("*35.计算属性(computed)和实例方法(method)有什么区别？")])]),t("li",[t("a",{attrs:{href:"#_36-父子组件生命周期"}},[e._v("36.父子组件生命周期？")])]),t("li",[t("a",{attrs:{href:"#_37-非props属性有什么特点-如何解决props层级过深的问题"}},[e._v("37.非props属性有什么特点，如何解决props层级过深的问题？")])]),t("li",[t("a",{attrs:{href:"#_38-如何编写可复用的组件"}},[e._v("38.如何编写可复用的组件？")])]),t("li",[t("a",{attrs:{href:"#_39-插槽slot"}},[e._v("39.插槽slot？")])]),t("li",[t("a",{attrs:{href:"#_40-如何声明一个过滤器"}},[e._v("40.如何声明一个过滤器？")])]),t("li",[t("a",{attrs:{href:"#_41-react-vue的router实现原理"}},[e._v("41.react/vue的router实现原理？")])]),t("li",[t("a",{attrs:{href:"#_42-mixin作用"}},[e._v("42.mixin作用？")])]),t("li",[t("a",{attrs:{href:"#_43-vue-use作用"}},[e._v("43.vue.use作用？")])]),t("li",[t("a",{attrs:{href:"#_44-vue中使用的设计模式"}},[e._v("44.vue中使用的设计模式？")])]),t("li",[t("a",{attrs:{href:"#_45-vue脚手架"}},[e._v("45.vue脚手架？")])]),t("li",[t("a",{attrs:{href:"#_46-为什么使用-set"}},[e._v("46.为什么使用$set？")])]),t("li",[t("a",{attrs:{href:"#_47-常用修饰符"}},[e._v("47.常用修饰符？")])])])])])]),t("p"),e._v(" "),t("h2",{attrs:{id:"vue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue"}},[e._v("#")]),e._v(" Vue")]),e._v(" "),t("h3",{attrs:{id:"_1-生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-生命周期"}},[e._v("#")]),e._v(" 1.生命周期?")]),e._v(" "),t("ul",[t("li",[e._v("生命周期就是vue实例从创建到销毁的过程。总共分为8个阶段(创建前后，载入前后，更新前后，销毁前后)")]),e._v(" "),t("li",[e._v("在beforeCreate阶段，el(挂载元素)和data还没初始化完成")]),e._v(" "),t("li",[e._v("created阶段，data初始化完成，可以访问方法和数据。但是el还没初始化完成")]),e._v(" "),t("li",[e._v("beforeMount阶段，el也初始化完成，可以获取dom节点，但不能操作")]),e._v(" "),t("li",[e._v("mounted阶段，挂载完毕，可以操作dom节点")]),e._v(" "),t("li",[e._v("数据变化触发beforeUpdate和updated")]),e._v(" "),t("li",[e._v("beforeDestroy阶段，可以销毁定时器和绑定的事件(此时实例还是可用的)")]),e._v(" "),t("li",[e._v("destroyed阶段，改变data不会触发生命周期函数(dom 结构依然存在)")])]),e._v(" "),t("h4",{attrs:{id:"第一次页面加载会触发哪几个钩子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第一次页面加载会触发哪几个钩子"}},[e._v("#")]),e._v(" 第一次页面加载会触发哪几个钩子？")]),e._v(" "),t("p",[e._v("beforeCreate, created, beforeMount, mounted")]),e._v(" "),t("h4",{attrs:{id:"dom渲染在哪个周期完成"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dom渲染在哪个周期完成"}},[e._v("#")]),e._v(" dom渲染在哪个周期完成？")]),e._v(" "),t("p",[e._v("mounted中就完成了")]),e._v(" "),t("h4",{attrs:{id:"挂载和创建的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#挂载和创建的区别"}},[e._v("#")]),e._v(" 挂载和创建的区别？")]),e._v(" "),t("p",[e._v("创建之后只可访问数据不可操作dom，挂载后可以访问数据操作dom")]),e._v(" "),t("h4",{attrs:{id:"vue生命周期钩子函数有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue生命周期钩子函数有哪些"}},[e._v("#")]),e._v(" vue生命周期钩子函数有哪些？")]),e._v(" "),t("p",[e._v("beforeCreate，created，beforeMount，mounted，beforeUpdate，updated，beforeDestroy，destroyed，activated，deactivated,\n(errorCaptured当捕获一个子孙组件的错误时会调用)")]),e._v(" "),t("h3",{attrs:{id:"_2-v-if和v-show的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-v-if和v-show的区别"}},[e._v("#")]),e._v(" 2.v-if和v-show的区别？")]),e._v(" "),t("ul",[t("li",[e._v("v-if实际是dom元素的创建和销毁")]),e._v(" "),t("li",[e._v("v-show实际操作的是css的display属性 none/block\n(v-show还减少了diff的对比，能优化操作中的性能)")])]),e._v(" "),t("h3",{attrs:{id:"_3-vue组件封装-全局可用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-vue组件封装-全局可用"}},[e._v("#")]),e._v(" 3.vue组件封装 全局可用？")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("在main.js引入，在使用的vue文件中直接<my-swiper></my-swipe>即可\nimport Swiper from './components/Swiper.vue'\nVue.component(\"my-swiper\", Swiper)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("h3",{attrs:{id:"_4-vue中的data为什么是个函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-vue中的data为什么是个函数"}},[e._v("#")]),e._v(" 4.vue中的data为什么是个函数？")]),e._v(" "),t("p",[e._v("组件之间共享data属性，如果不用函数写法，data的值会指向同一个引用地址，改变一个会影响其他\n(函数写法，保证每次返回的都是一个新的对象，组件之间互相不影响)")]),e._v(" "),t("h3",{attrs:{id:"_5-深度监听"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-深度监听"}},[e._v("#")]),e._v(" 5.深度监听？")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("watch: {\n    a: {\n        deep: true, // 开启深度监听\n        handler() {\n            \n        }\n    }\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])]),t("h3",{attrs:{id:"_6-keep-alive作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-keep-alive作用"}},[e._v("#")]),e._v(" 6.keep-alive作用？")]),e._v(" "),t("ul",[t("li",[e._v("主要作用缓存后只会走activated和deactivated，activated页面或组件被缓存每次进入页面会触发。deactivated组件离开触发")]),e._v(" "),t("li",[e._v("路由从列表组件跳到详情页组件，再跳回列表组件，会重新渲染。可以通过缓存提高性能。")]),e._v(" "),t("li",[e._v("可以实现分页后查看详情再跳回列表时，回到原来所在的页面")])]),e._v(" "),t("h3",{attrs:{id:"_7-vue-router传参"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-vue-router传参"}},[e._v("#")]),e._v(" 7.vue-router传参？")]),e._v(" "),t("ul",[t("li",[e._v("this.$router.params.id获取动态路由的参数/user/:id")]),e._v(" "),t("li",[e._v("this.$router.query.id获取?后拼接的参数/user?id=123")])]),e._v(" "),t("h3",{attrs:{id:"_8-vue的数据流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-vue的数据流"}},[e._v("#")]),e._v(" 8.vue的数据流？")]),e._v(" "),t("p",[e._v("vue的数据流是单向的")]),e._v(" "),t("h4",{attrs:{id:"vue是单向数据流-怎么v-model又是双向绑定"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue是单向数据流-怎么v-model又是双向绑定"}},[e._v("#")]),e._v(" vue是单向数据流，怎么v-model又是双向绑定？")]),e._v(" "),t("p",[e._v("vue数据流是单向的，由父节点传给子节点。")]),e._v(" "),t("h3",{attrs:{id:"_9-v-router路由守卫有哪些参数-如何实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-v-router路由守卫有哪些参数-如何实现"}},[e._v("#")]),e._v(" 9.v-router路由守卫有哪些参数，如何实现？")]),e._v(" "),t("p",[e._v("路由守卫分成全局守卫，路由独享守卫，组件内路由守卫")]),e._v(" "),t("ul",[t("li",[e._v("全局前置守卫beforeEach(to,from,next)")]),e._v(" "),t("li",[e._v("路由独享守卫beforeEnter(to,from,next)")]),e._v(" "),t("li",[e._v("组件内路由守卫beforeRouteEnter(to,from,next),beforeRouteUpdate(to,from,next),beforeRouteLeave(to,from,next)")]),e._v(" "),t("li",[e._v("全局解析守卫beforeResolve(to,from,next)")]),e._v(" "),t("li",[e._v("全局后置守卫afterEach(to,from)")])]),e._v(" "),t("h5",{attrs:{id:"没有导航切换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#没有导航切换"}},[e._v("#")]),e._v(" 没有导航切换：")]),e._v(" "),t("ul",[t("li",[e._v("beforeEach->beforeEnter->beforeRouteEnter->beforeResolve->afterEach")])]),e._v(" "),t("h5",{attrs:{id:"有导航切换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有导航切换"}},[e._v("#")]),e._v(" 有导航切换：")]),e._v(" "),t("ul",[t("li",[e._v("beforeRouteLeave->beforeEach->beforeRouteEnter->beforeResolve->afterEach")])]),e._v(" "),t("h5",{attrs:{id:"完整导航解析流程-来自官网"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#完整导航解析流程-来自官网"}},[e._v("#")]),e._v(" 完整导航解析流程(来自官网)")]),e._v(" "),t("ol",[t("li",[e._v("导航被触发。")]),e._v(" "),t("li",[e._v("在失活的组件里调用 beforeRouteLeave 守卫。")]),e._v(" "),t("li",[e._v("调用全局的 beforeEach 守卫。")]),e._v(" "),t("li",[e._v("在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。")]),e._v(" "),t("li",[e._v("在路由配置里调用 beforeEnter。")]),e._v(" "),t("li",[e._v("解析异步路由组件。")]),e._v(" "),t("li",[e._v("在被激活的组件里调用 beforeRouteEnter。")]),e._v(" "),t("li",[e._v("调用全局的 beforeResolve 守卫 (2.5+)。")]),e._v(" "),t("li",[e._v("导航被确认。")]),e._v(" "),t("li",[e._v("调用全局的 afterEach 钩子。")]),e._v(" "),t("li",[e._v("触发 DOM 更新。")]),e._v(" "),t("li",[e._v("调用 beforeRouteEnter 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。")])]),e._v(" "),t("h3",{attrs:{id:"_10-vuex有哪些参数-作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-vuex有哪些参数-作用"}},[e._v("#")]),e._v(" 10.vuex有哪些参数，作用？")]),e._v(" "),t("p",[e._v("vuex是vue的状态管理。主要用来解决各组件间传值复杂和状态混乱的问题\n=》无法持久化 可以通过localStorage实现")]),e._v(" "),t("ul",[t("li",[e._v("state 存放数据，不可以直接修改")]),e._v(" "),t("li",[e._v("getter 类似与computed，用来计算")]),e._v(" "),t("li",[e._v("mutation 函数，必须是同步方法 动态修改数据")]),e._v(" "),t("li",[e._v("action 函数，如果有异步操作可以通过action代替mutation")]),e._v(" "),t("li",[e._v("module 分模块，不同模块拥有自己的state，mutation，action，getter")])]),e._v(" "),t("h4",{attrs:{id:"vuex改变全局参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vuex改变全局参数"}},[e._v("#")]),e._v(" VUEX改变全局参数？")]),e._v(" "),t("p",[e._v("异步方法通过dispatch(function)触发action，action再去commit触发mutation修改参数。同步方法直接通过commit触发mutation修改参数")]),e._v(" "),t("h4",{attrs:{id:"注入原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注入原理"}},[e._v("#")]),e._v(" 注入原理？")]),e._v(" "),t("p",[e._v("通过Vue.use去安装vuex，插件内部有一个install方法，调用install方法把store注入到vuex实例中")]),e._v(" "),t("h3",{attrs:{id:"_11-mvvm模型的理解及与mvc区别-vue-mvvm-当model变化会触发view更新"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-mvvm模型的理解及与mvc区别-vue-mvvm-当model变化会触发view更新"}},[e._v("#")]),e._v(" 11.mvvm模型的理解及与MVC区别 => vue-mvvm 当model变化会触发view更新？")]),e._v(" "),t("ul",[t("li",[e._v("mvc model数据层 view视图层 controller控制层  各部分之间通信是单向的 view->controller->model->controller->view")]),e._v(" "),t("li",[e._v("mvvm 由mvc演变而来 controller演变成viewModel 各部分之间通信都是双向的 当model变化vm会自动更新，view也会自动更新")]),e._v(" "),t("li",[e._v("model<->controller model<->view => model和view 不直接进行通信")])]),e._v(" "),t("h3",{attrs:{id:"_12-v-for为什么一定要绑定key"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-v-for为什么一定要绑定key"}},[e._v("#")]),e._v(" 12.v-for为什么一定要绑定key？")]),e._v(" "),t("ul",[t("li",[e._v("key主要是用在虚拟dom上，在新旧节点对比时用来辨识节点，")]),e._v(" "),t("li",[e._v("有key的话可以更快的找到对应的节点，没有key的话会采用就地复用的原则")]),e._v(" "),t("li",[e._v("如果数据顺序被改变，vue不会移动元素来调整顺序，而是就地更新每个元素。")])]),e._v(" "),t("h4",{attrs:{id:"key主要是用来解决什么问题-为什么不建议用index"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#key主要是用来解决什么问题-为什么不建议用index"}},[e._v("#")]),e._v(" key主要是用来解决什么问题?为什么不建议用index？")]),e._v(" "),t("p",[e._v("尽量不用index作为key，否则在指定位置插入一个新元素，改变了index，这样就会导致后面所有元素都进行更新，因为后面的key都改变了")]),e._v(" "),t("h3",{attrs:{id:"_13-vue的inject和eventbus"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-vue的inject和eventbus"}},[e._v("#")]),e._v(" 13.vue的inject和eventbus？")]),e._v(" "),t("p",[e._v("provide和inject是成对出现的，用来父组件向子孙组件传值")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  provide() { // 父组件\n    return {\n      type: 'yeye',\n      age: 60\n    }\n  }\n  inject: ['age'] // 子孙组件\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// main.js 定义\nVue.prototype.$eventBus = new Vue()\n// 接收\nthis.$eventBus.$on('update', val => {})\n// 发布\nthis.$eventBus.$emit('update', '更新信息')\n// 销毁\nthis.$eventBus.$off('update', {})\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])]),t("h3",{attrs:{id:"_14-vue2和vue3响应式原理实现差异"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-vue2和vue3响应式原理实现差异"}},[e._v("#")]),e._v(" 14.vue2和vue3响应式原理实现差异？")]),e._v(" "),t("ul",[t("li",[e._v("vue2的Object.defineProperty只能劫持对象属性，而vue3的proxy是直接代理对象")]),e._v(" "),t("li",[e._v("vue3不用重写setter和getter方法(不用直接递归)所以性能高")])]),e._v(" "),t("h3",{attrs:{id:"_15-v-model可以用什么替代"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-v-model可以用什么替代"}},[e._v("#")]),e._v(" 15.v-model可以用什么替代?")]),e._v(" "),t("p",[e._v("v-bind+v-on v-on定义事件获取输入的值进行设置，v-bind将这个值显示出来")]),e._v(" "),t("h3",{attrs:{id:"_16-vue组件销毁-所有自定义事件-emit-on定义的事件-和原生事件都会解绑吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-vue组件销毁-所有自定义事件-emit-on定义的事件-和原生事件都会解绑吗"}},[e._v("#")]),e._v(" 16.vue组件销毁，所有自定义事件($emit，$on定义的事件)和原生事件都会解绑吗?")]),e._v(" "),t("p",[e._v("会自动解绑组件本身的事件，像定时器，addEventListener注册的监听器，都要在beforeDestroy的时候手动解绑")]),e._v(" "),t("h3",{attrs:{id:"_17-vue怎么区分开发环境和生产环境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-vue怎么区分开发环境和生产环境"}},[e._v("#")]),e._v(" 17.vue怎么区分开发环境和生产环境？")]),e._v(" "),t("p",[e._v("用webpack定义两套配置，一套开发，一套生产")]),e._v(" "),t("h3",{attrs:{id:"_18-如何设置css只在当前组件起作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18-如何设置css只在当前组件起作用"}},[e._v("#")]),e._v(" 18.如何设置css只在当前组件起作用？")]),e._v(" "),t("p",[e._v("在style标签添加scoped即可。")]),e._v(" "),t("h4",{attrs:{id:"原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[e._v("#")]),e._v(" 原理")]),e._v(" "),t("p",[e._v("编译后会将所有元素生成唯一的属性或者类名")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 代码\n.btn {\n}\n\n// 编译后\n.btn .jsx-1287234 {\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("h3",{attrs:{id:"_19-todo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_19-todo"}},[e._v("#")]),e._v(" 19.// TODO")]),e._v(" "),t("h3",{attrs:{id:"_20-route和router有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20-route和router有什么区别"}},[e._v("#")]),e._v(" 20.route和router有什么区别？")]),e._v(" "),t("ul",[t("li",[e._v("route是路由信息对象，可以通过route获得path，hash，query等路由信息参数")]),e._v(" "),t("li",[e._v("router是路由实现对象，可以用来跳转router.push()")])]),e._v(" "),t("h3",{attrs:{id:"_21-vue是挂载在哪个标签上"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_21-vue是挂载在哪个标签上"}},[e._v("#")]),e._v(" 21.vue是挂载在哪个标签上？")]),e._v(" "),t("p",[e._v("vue是挂载在body标签里面(在vue中获取不到body标签)")]),e._v(" "),t("h3",{attrs:{id:"_22-computed和watch区别是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22-computed和watch区别是什么"}},[e._v("#")]),e._v(" 22.computed和watch区别是什么？")]),e._v(" "),t("ul",[t("li",[e._v("computed是计算属性不在data里声明，而watch监听的是data里的属性")]),e._v(" "),t("li",[e._v("computed定义的值会进行缓存，watch不会。\n(computed缓存是通过一个dirty属性进行控制，只有当其响应式数据发生变化时才会设置为true，触发重新计算)")]),e._v(" "),t("li",[e._v("watch监听的是属性值，computed监听的是依赖值。依赖值不变的情况都会直接读取缓存，只有改变了才会重新计算")])]),e._v(" "),t("h3",{attrs:{id:"_23-vue模版编译原理-为什么要用template"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_23-vue模版编译原理-为什么要用template"}},[e._v("#")]),e._v(" 23.vue模版编译原理？为什么要用template？")]),e._v(" "),t("p",[e._v("传递的是template属性，需要将template编译成render函数")]),e._v(" "),t("ol",[t("li",[e._v("通过正则将模版解析成AST语法树 template=>ast语法树")]),e._v(" "),t("li",[e._v("从AST语法树中找出静态节点进行标记=》目的是提高虚拟dom用diff算法比对时的性能")]),e._v(" "),t("li",[e._v("(generate递归拼接为字符串)通过AST生成render函数\nrender函数作用是生成虚拟节点(递归是先子后父)")])]),e._v(" "),t("h4",{attrs:{id:"抽象语法树ast和虚拟dom有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#抽象语法树ast和虚拟dom有什么区别"}},[e._v("#")]),e._v(" 抽象语法树AST和虚拟dom有什么区别？")]),e._v(" "),t("p",[e._v("ast做的是语法层面的转化，虚拟dom描述的是dom元素，可以增加自定义属性")]),e._v(" "),t("h3",{attrs:{id:"_24-vue的挂载过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_24-vue的挂载过程"}},[e._v("#")]),e._v(" 24.vue的挂载过程？")]),e._v(" "),t("ul",[t("li",[e._v("new Vue的时候会调用init方法，初始化数据，事件，生命周期这些")]),e._v(" "),t("li",[e._v("然后通过$mount里面的mountComponent去执行render生成虚拟dom，再通过update将虚拟dom生成真实dom渲染到页面上")])]),e._v(" "),t("h3",{attrs:{id:"_25-说说组件传值的几种方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_25-说说组件传值的几种方式"}},[e._v("#")]),e._v(" 25.说说组件传值的几种方式？")]),e._v(" "),t("ol",[t("li",[e._v("父子通信 props和$emit =>父组件通过props向子组件传递数据，子组件通过$emit通知父组件")]),e._v(" "),t("li",[e._v("父子通信 $parent和$children =>可以访问该组件所有方法和data。\n要注意边界情况。如#app的$parent拿到new Vue的实例，再往上就是undefined。最底层拿$children拿到的是空数组，$children的值是数组，$parent的值是对象")]),e._v(" "),t("li",[e._v("父子孙通信(跨级通信) provide和inject =>父组件通过provide提供变量，子孙组件都能通过inject注入变量。\n缺点不是响应式，但是如果传入的是可响应的就还是可响应的 =>想要响应式可以通过传入父组件的实例或者是2.6.0新增的Vue.observable()")]),e._v(" "),t("li",[e._v("父子通信 ref和refs =>ref在普通dom元素上使用，指向的就是dom元素，在子组件上使用，指向的就是组件实例，可以直接调用组件方法和data")]),e._v(" "),t("li",[e._v("全局通信 eventBus =>可以向该中心发送通知和接收通知 =>缺点是项目较大时难以维护 $emit定义事件名称及操作，$on接收该事件名称传递的值")]),e._v(" "),t("li",[e._v("全局通信 Vuex =>state，getter，mutation，action，module。解决了多个视图依赖同一状态和来自不同视图的行为需要变更同一状态的问题\n=>修改state的数据必须通过mutation进行，action也是要通过mutation")]),e._v(" "),t("li",[e._v("全局通信 localStorage和sessionStorage =>目的是持久化保存，缺点也是数据和状态比较混乱，不易维护\n*8. 父子孙通信(跨级通信) $attrs和$listeners => $attrs和$listeners是两个对象，$attrs保存的是父组件中绑定的非props属性，$listener保存的是父组件中绑定的非原生事件")])]),e._v(" "),t("h3",{attrs:{id:"_26-如何解决vue初始化页面闪动问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_26-如何解决vue初始化页面闪动问题"}},[e._v("#")]),e._v(" 26.如何解决vue初始化页面闪动问题？")]),e._v(" "),t("p",[e._v("v-cloak=》v-cloak里面设置display:none")]),e._v(" "),t("h3",{attrs:{id:"_27-什么是spa-有什么优点和缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_27-什么是spa-有什么优点和缺点"}},[e._v("#")]),e._v(" 27.什么是SPA，有什么优点和缺点？")]),e._v(" "),t("p",[e._v("SPA(single page application)单页面应用，仅在web页面初始化时加载相应的HTML，JS，CSS。\n一旦页面加载完成，SPA不会因为用户的操作而进行页面的重新加载或跳转。\n=》利用路由机制实现内容切换(hash模式,局部刷新)")]),e._v(" "),t("h4",{attrs:{id:"优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[e._v("#")]),e._v(" 优点：")]),e._v(" "),t("p",[e._v("用户体验更好，避免了不必要的跳转和重复渲染，相对也能减轻服务器压力")]),e._v(" "),t("h4",{attrs:{id:"缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[e._v("#")]),e._v(" 缺点：")]),e._v(" "),t("p",[e._v("初次加载耗时多，不利于SEO")]),e._v(" "),t("h3",{attrs:{id:"_28-在哪个生命周期发起数据请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_28-在哪个生命周期发起数据请求"}},[e._v("#")]),e._v(" 28.在哪个生命周期发起数据请求？")]),e._v(" "),t("p",[e._v("在created，beforeMount，mounted都可以发起。")]),e._v(" "),t("h3",{attrs:{id:"_29-vue-router的几种模式-hash和history有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_29-vue-router的几种模式-hash和history有什么区别"}},[e._v("#")]),e._v(" 29.vue-router的几种模式?hash和history有什么区别？")]),e._v(" "),t("p",[e._v("两种：hash和history。默认hash模式，hash模式在url中会存在#符号，history模式不会")]),e._v(" "),t("ul",[t("li",[e._v("history需要后端nginx配置，url中的路径就是根目录下的相对路径，如果不用就会返回404")]),e._v(" "),t("li",[e._v("hash模式只要index文件是真实路径即可")])]),e._v(" "),t("h3",{attrs:{id:"_30-vue数据频繁变化-为什么只以最后一次为准"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_30-vue数据频繁变化-为什么只以最后一次为准"}},[e._v("#")]),e._v(" 30.vue数据频繁变化，为什么只以最后一次为准？")]),e._v(" "),t("p",[e._v("watcher里面有做去重操作：给每个dep引入id，watcher会记录所有dep的id，下次依赖收集的时候如果dep的id已经存在就不再收集watcher了\n=》queueWatcher函数负责把对应的watcher收集到数组queue中，flushSchedulerQueue会从queue中取出watcher，然后执行watcher.run")]),e._v(" "),t("h3",{attrs:{id:"_31-vue和react区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_31-vue和react区别"}},[e._v("#")]),e._v(" 31.vue和react区别？")]),e._v(" "),t("ul",[t("li",[e._v("vue和react的diff算法不同\nvue对比节点，如果元素类型相同，className不同，认为是不同元素会删除重建，react会认为是同类型节点，只修改节点属性\nvue列表比对采用首尾指针，react采用从左到右比对的方式，当集合把最后一个节点移动到第一个，react会把前面的节点依次移动，而vue只会把最后一个移动到第一个")]),e._v(" "),t("li",[e._v("响应式实现原理不同\nreact通过setState来更新状态=>状态更新后组件也会重新渲染\nvue通过defineProperty进行数据劫持再进行更新")]),e._v(" "),t("li",[e._v("vue使用template模版编写，react使用jsx编写")]),e._v(" "),t("li",[e._v("vue是双向数据流，react是单向数据流")]),e._v(" "),t("li",[e._v("vue给我们封装了许多指令，react没有")])]),e._v(" "),t("h3",{attrs:{id:"_32-v-html有什么问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_32-v-html有什么问题"}},[e._v("#")]),e._v(" 32.v-html有什么问题？")]),e._v(" "),t("p",[e._v("很容易导致xss攻击，不能用于用户提交的内容上")]),e._v(" "),t("h3",{attrs:{id:"_33-v-if和v-for为什么不建议混合使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_33-v-if和v-for为什么不建议混合使用"}},[e._v("#")]),e._v(" 33.v-if和v-for为什么不建议混合使用？")]),e._v(" "),t("p",[e._v("被渲染的dom会重复一个创建销毁的过程=>v-for优先级更高，如果数组很大，而实际要展示的很少，造成性能浪费\n(当v-for和v-if处于同一个节点时，v-for的优先级比v-if更高)=>通过computed先对要展示的数据进行过滤，再进行v-for")]),e._v(" "),t("h3",{attrs:{id:"_34-vue2和vue3区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_34-vue2和vue3区别"}},[e._v("#")]),e._v(" 34.vue2和vue3区别？")]),e._v(" "),t("ul",[t("li",[e._v("双向绑定原理不同=》vue2通过Object.defineProperty做数据劫持,vue3通过proxy进行代理。defineProperty不能监听数据对象新增的属性=>proxy可以(需要手动$set)")]),e._v(" "),t("li",[e._v("vue2是option API vue3是Composition API")]),e._v(" "),t("li",[e._v("生命周期改变(beforeCreate,created->setup(),beforeMount->onBeforeMount,mounted->onMounted,beforeUpdate->onBeforeUpdate,\nupdated->onUpdated,beforeDestroy->onBeforeUnMount,destroyed->onUnMounted,errCaptured->onErrorCaptured)\n=>把beforeCreate和created合并成setup()，挂载和更新的钩子前面都加上了on，beforeDestroy变成onBeforeUnMount，destroyed变成onUnMounted")]),e._v(" "),t("li",[e._v("vue3不使用this，避免了this指向问题。(vue2通过this去指向当前组件实例，vue3没有对this进行绑定)")]),e._v(" "),t("li",[e._v("template里面可以使用多个子节点(和react一样，有fragment)")]),e._v(" "),t("li",[e._v("vue3更小(移除不常用API，引入tree-shaking)更快(diff算法优化)")]),e._v(" "),t("li",[e._v("vue3基于ts编写的，对ts的提示更友好")])]),e._v(" "),t("h3",{attrs:{id:"_35-计算属性-computed-和实例方法-method-有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_35-计算属性-computed-和实例方法-method-有什么区别"}},[e._v("#")]),e._v(" *35.计算属性(computed)和实例方法(method)有什么区别？")]),e._v(" "),t("ul",[t("li",[e._v("计算属性有缓存，实例方法没有")]),e._v(" "),t("li",[e._v("计算属性不能传参数，实例方法可以")])]),e._v(" "),t("h3",{attrs:{id:"_36-父子组件生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_36-父子组件生命周期"}},[e._v("#")]),e._v(" 36.父子组件生命周期？")]),e._v(" "),t("ul",[t("li",[e._v("父beforeCreate=>父created=>父beforeMount=>子beforeCreate=>子created=>子beforeMount=>子mounted=>父mounted")]),e._v(" "),t("li",[e._v("父组件先执行，在beforeMount和mounted之间，子组件执行beforeCreated到mounted")]),e._v(" "),t("li",[e._v("更新过程：父beforeUpdate=>子beforeUpdate=>子updated=>父updated(如果不互相影响，各自执行各自的。如父beforeUpdate=>父updated)")]),e._v(" "),t("li",[e._v("销毁过程: 父beforeDestroy=>子beforeDestroy=>子destroyed=>父destroyed")])]),e._v(" "),t("h3",{attrs:{id:"_37-非props属性有什么特点-如何解决props层级过深的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_37-非props属性有什么特点-如何解决props层级过深的问题"}},[e._v("#")]),e._v(" 37.非props属性有什么特点，如何解决props层级过深的问题？")]),e._v(" "),t("p",[e._v("非props属性的子属性不能使用该属性\n可以使用Vuex解决层级过深")]),e._v(" "),t("h3",{attrs:{id:"_38-如何编写可复用的组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_38-如何编写可复用的组件"}},[e._v("#")]),e._v(" 38.如何编写可复用的组件？")]),e._v(" "),t("p",[e._v("组件只负责UI的展示和交互，不做具体数据处理，尽可能减少外部依赖")]),e._v(" "),t("h3",{attrs:{id:"_39-插槽slot"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_39-插槽slot"}},[e._v("#")]),e._v(" 39.插槽slot？")]),e._v(" "),t("p",[e._v("子组件定义插槽，父组件提供内容去填补插槽")]),e._v(" "),t("ul",[t("li",[e._v("默认插槽(匿名插槽)一个组件只能有一个，相对应的是具名插槽，一个组件可以有多个，但是每个名称不同")]),e._v(" "),t("li",[e._v("匿名插槽和具名插槽不绑定数据，作用域插槽要在slot上绑定数据")])]),e._v(" "),t("h3",{attrs:{id:"_40-如何声明一个过滤器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_40-如何声明一个过滤器"}},[e._v("#")]),e._v(" 40.如何声明一个过滤器？")]),e._v(" "),t("p",[e._v("全局过滤器：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("vue.filter(‘gettime’,function(date){\n    Var time=new date(date)\n    return time.getFullyear()+’/’+time.getMonth()+1’/’+getDate() }\n)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br")])]),t("h3",{attrs:{id:"_41-react-vue的router实现原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_41-react-vue的router实现原理"}},[e._v("#")]),e._v(" 41.react/vue的router实现原理？")]),e._v(" "),t("p",[e._v("主要有两种实现方式：")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("history API：\nhistory.pushState()跳转路由\n通过popstate事件监听路由变化(无法监听到history.pushState()的路由变化)")])]),e._v(" "),t("li",[t("p",[e._v("hash：\nlocation.hash跳转路由\n通过hashchange事件监听路由变化")])])]),e._v(" "),t("h4",{attrs:{id:"区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[e._v("#")]),e._v(" 区别：")]),e._v(" "),t("p",[e._v("hash只能修改#后的值，history可以随意设置同源url\nhash的历史记录只显示之前的网址不会显示hash值，而history每条记录都会进入历史记录\nhash无需后端配置，而history需要后端配合。比如需要设置一个页面用来匹配找不到资源的情况")]),e._v(" "),t("h3",{attrs:{id:"_42-mixin作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_42-mixin作用"}},[e._v("#")]),e._v(" 42.mixin作用？")]),e._v(" "),t("p",[e._v("作用是抽离公共业务逻辑\n(本质就是个js对象，将公共功能传入mixins，组件会将mixins对象中的选项和组件本身的合并，就是混入)\n混入数据和本身组件数据有冲突，以本身为准")]),e._v(" "),t("h4",{attrs:{id:"mixin原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mixin原理"}},[e._v("#")]),e._v(" mixin原理？")]),e._v(" "),t("p",[e._v("主要是调用mergeOptions方法，mergeOptions会先递归处理mixin的数据，赋值给parent\n=>然后再遍历mergeFiled parent的key，最后再遍历child，如果parent已经处理过这个key，就不处理")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var myMixin = {\n  created: function () {\n    this.hello()\n  },\n  methods: {\n    hello: function () {\n      console.log('hello from mixin!')\n    }\n  }\n}\n// 局部混入\nVue.component('componentA',{\n  mixins: [myMixin]\n})\n// 全局混入 => 会影响到第三方组件，比较适合用在插件里\nVue.mixin({\n  created: function () {\n      console.log(\"全局混入\")\n    }\n})\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br")])]),t("h3",{attrs:{id:"_43-vue-use作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_43-vue-use作用"}},[e._v("#")]),e._v(" 43.vue.use作用？")]),e._v(" "),t("p",[e._v("是用来使用第三方库的\n内部有install方法传入vue(构造函数)=》内部使用vue")]),e._v(" "),t("h3",{attrs:{id:"_44-vue中使用的设计模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_44-vue中使用的设计模式"}},[e._v("#")]),e._v(" 44.vue中使用的设计模式？")]),e._v(" "),t("ol",[t("li",[e._v("单例模式 =》只有一个实例")]),e._v(" "),t("li",[e._v("工厂模式 =》传入参数就可以创建实例")]),e._v(" "),t("li",[e._v("观察者模式 =》依赖收集")]),e._v(" "),t("li",[e._v("代理模式 =》proxy")])]),e._v(" "),t("h3",{attrs:{id:"_45-vue脚手架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_45-vue脚手架"}},[e._v("#")]),e._v(" 45.vue脚手架？")]),e._v(" "),t("p",[e._v("vue-cli=>create-vue")]),e._v(" "),t("h3",{attrs:{id:"_46-为什么使用-set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_46-为什么使用-set"}},[e._v("#")]),e._v(" 46.为什么使用$set？")]),e._v(" "),t("p",[e._v("vue不能监测到对象属性的添加或删除，需要通过$set来实现")]),e._v(" "),t("p",[t("img",{attrs:{src:"/reactive.png",alt:"Image text"}})]),e._v(" "),t("p",[e._v("vue初始化流程图\n"),t("img",{attrs:{src:"/vue-init.svg",alt:"Image text"}})]),e._v(" "),t("h3",{attrs:{id:"_47-常用修饰符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_47-常用修饰符"}},[e._v("#")]),e._v(" 47.常用修饰符？")]),e._v(" "),t("p",[e._v("表单修饰符")]),e._v(" "),t("ul",[t("li",[e._v("lazy(光标离开才赋值，@change事件触发后)、trim、number\n事件修饰符")]),e._v(" "),t("li",[e._v("stop、prevent、self、once、capture、passive、native\n鼠标按钮修饰符")]),e._v(" "),t("li",[e._v("left、right、middle\n键盘修饰符")]),e._v(" "),t("li",[e._v("onkeyup、onkeydown、enter等")])])])}),[],!1,null,null,null);t.default=v.exports}}]);