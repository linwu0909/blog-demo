(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{298:function(e,t,a){"use strict";a.r(t);var s=a(14),r=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#react"}},[e._v("React")]),t("ul",[t("li",[t("a",{attrs:{href:"#_1-diff算法-及虚拟dom"}},[e._v("1.diff算法？及虚拟dom？")])]),t("li",[t("a",{attrs:{href:"#_2-fiber是什么"}},[e._v("2.fiber是什么？")])]),t("li",[t("a",{attrs:{href:"#_3-setstate是同步还是异步-私下简单记忆-同步逻辑中就异步-异步逻辑中就同步"}},[e._v("3.setState是同步还是异步？(私下简单记忆：同步逻辑中就异步，异步逻辑中就同步)")])]),t("li",[t("a",{attrs:{href:"#_4-ui组件与容器组件"}},[e._v("4.UI组件与容器组件？")])]),t("li",[t("a",{attrs:{href:"#_5-todo"}},[e._v("5.//TODO")])]),t("li",[t("a",{attrs:{href:"#_6-生命周期-只针对类-函数式组件无生命周期-》括号里都是react16以后的钩子"}},[e._v("6.生命周期(只针对类，函数式组件无生命周期)=》括号里都是react16以后的钩子")])]),t("li",[t("a",{attrs:{href:"#_7-react脚手架"}},[e._v("7.react脚手架")])]),t("li",[t("a",{attrs:{href:"#_8-shouldcomponentupdate"}},[e._v("8.shouldComponentUpdate？")])]),t("li",[t("a",{attrs:{href:"#_9-react-router-dom和react-router区别"}},[e._v("9.react-router-dom和react-router区别？")])]),t("li",[t("a",{attrs:{href:"#_10-setstate时发生了什么"}},[e._v("10.setState时发生了什么？")])]),t("li",[t("a",{attrs:{href:"#_11-怎么理解在react中-一切都是属性"}},[e._v("11.怎么理解在react中，一切都是属性？")])]),t("li",[t("a",{attrs:{href:"#_12-todo"}},[e._v("12.//TODO")])]),t("li",[t("a",{attrs:{href:"#_13-常见hooks功能-react-16-8引入了hooks"}},[e._v("13.常见hooks功能(react 16.8引入了hooks)")])]),t("li",[t("a",{attrs:{href:"#_14-hooks如何模拟componentdidmount"}},[e._v("14.hooks如何模拟componentDidMount？")])]),t("li",[t("a",{attrs:{href:"#_15-hooks如何部分替代redux功能"}},[e._v("15.hooks如何部分替代redux功能？")])]),t("li",[t("a",{attrs:{href:"#_16-react函数式组件优点"}},[e._v("16.react函数式组件优点？")])]),t("li",[t("a",{attrs:{href:"#_17-react在1s内点击按钮多次-怎么获得最后一次的更新状态"}},[e._v("17.react在1s内点击按钮多次，怎么获得最后一次的更新状态？")])]),t("li",[t("a",{attrs:{href:"#_18-react和vue中受控组件和不受控组件区别"}},[e._v("18.react和vue中受控组件和不受控组件区别？")])]),t("li",[t("a",{attrs:{href:"#_19-说说对redux了解"}},[e._v("19.说说对redux了解？")])]),t("li",[t("a",{attrs:{href:"#_20-react17-》最新是18-22年三月发布"}},[e._v("20.react17=》最新是18(22年三月发布)")])]),t("li",[t("a",{attrs:{href:"#_21-useeffect和componentdidmount差异"}},[e._v("21.useEffect和componentDidMount差异？")])]),t("li",[t("a",{attrs:{href:"#_22-ref"}},[e._v("22.ref？")])]),t("li",[t("a",{attrs:{href:"#_23-组件通信"}},[e._v("23.组件通信")])]),t("li",[t("a",{attrs:{href:"#_24-父组件如何调用子组件方法"}},[e._v("24.父组件如何调用子组件方法？")])]),t("li",[t("a",{attrs:{href:"#_25-性能优化"}},[e._v("25.性能优化")])]),t("li",[t("a",{attrs:{href:"#_26-react如何区分类组件和函数组件"}},[e._v("26.react如何区分类组件和函数组件？")])]),t("li",[t("a",{attrs:{href:"#_27-jsx原理"}},[e._v("27.jsx原理？")])]),t("li",[t("a",{attrs:{href:"#_28-props透传"}},[e._v("28.props透传？")])]),t("li",[t("a",{attrs:{href:"#_29-空标签的作用"}},[e._v("29.空标签的作用？")])]),t("li",[t("a",{attrs:{href:"#_30-属性和状态的区别"}},[e._v("30.属性和状态的区别？")])]),t("li",[t("a",{attrs:{href:"#_31-插槽"}},[e._v("31.插槽？")])]),t("li",[t("a",{attrs:{href:"#_32-声明式导航和编程式导航区别"}},[e._v("32.声明式导航和编程式导航区别？")])]),t("li",[t("a",{attrs:{href:"#_33-反向代理"}},[e._v("33.反向代理？")])]),t("li",[t("a",{attrs:{href:"#_34-说说对cssmodule"}},[e._v("34.说说对cssModule？")])]),t("li",[t("a",{attrs:{href:"#_35-immutable作用"}},[e._v("35.immutable作用？")])]),t("li",[t("a",{attrs:{href:"#_36-mobx和redux区别-都是react状态管理工具"}},[e._v("36.mobx和redux区别(都是react状态管理工具)？")])]),t("li",[t("a",{attrs:{href:"#_37-了解过style-components吗-将html标签包装成组件"}},[e._v("37.了解过style-components吗？(将html标签包装成组件)")])]),t("li",[t("a",{attrs:{href:"#_38-createportal作用"}},[e._v("38.createPortal作用？")])]),t("li",[t("a",{attrs:{href:"#_39-react的lazy和suspense作用-路由懒加载"}},[e._v("39.react的lazy和suspense作用？(路由懒加载)")])]),t("li",[t("a",{attrs:{href:"#_40-forwardref用过吗"}},[e._v("40.forwardRef用过吗？")])]),t("li",[t("a",{attrs:{href:"#_41-dva"}},[e._v("41.dva")])]),t("li",[t("a",{attrs:{href:"#_42-umi-乌米"}},[e._v("42.umi(乌米)")])]),t("li",[t("a",{attrs:{href:"#_43-hooks实现一个计数器组件"}},[e._v("43.hooks实现一个计数器组件？")])]),t("li",[t("a",{attrs:{href:"#_44-createelement和cloneelement区别"}},[e._v("44.createElement和cloneElement区别？")])]),t("li",[t("a",{attrs:{href:"#_45-usestate和setstate区别"}},[e._v("45.useState和setState区别？")])]),t("li",[t("a",{attrs:{href:"#_46-使用hooks有什么常见的问题"}},[e._v("46.使用hooks有什么常见的问题？")])]),t("li",[t("a",{attrs:{href:"#_47-hoc-higher-order-component"}},[e._v("47.HOC(Higher Order Component)")])]),t("li",[t("a",{attrs:{href:"#_48-jsx和fiber有什么关系"}},[e._v("48.jsx和Fiber有什么关系？")])]),t("li",[t("a",{attrs:{href:"#_49-react17之前jsx文件为什么要声明import-react-from-react-之后为什么不需要了"}},[e._v("49.react17之前jsx文件为什么要声明import React from 'react'，之后为什么不需要了？")])]),t("li",[t("a",{attrs:{href:"#_50-react中怎么使用async-await"}},[e._v("50.react中怎么使用async/await？")])]),t("li",[t("a",{attrs:{href:"#_51-为什么hooks不能写在条件判断中"}},[e._v("51.为什么hooks不能写在条件判断中？")])]),t("li",[t("a",{attrs:{href:"#_52-render作用"}},[e._v("52.render作用？")])]),t("li",[t("a",{attrs:{href:"#_53-react怎么区分class组件和function组件"}},[e._v("53.react怎么区分Class组件和Function组件？")])]),t("li",[t("a",{attrs:{href:"#_54-请说一下react的渲染过程"}},[e._v("54.请说一下react的渲染过程？")])]),t("li",[t("a",{attrs:{href:"#_55-react有哪些优化手段"}},[e._v("55.react有哪些优化手段？")])]),t("li",[t("a",{attrs:{href:"#_56-我们写的事件是绑定在dom上么-如果不是绑定在哪里"}},[e._v("56.我们写的事件是绑定在dom上么，如果不是绑定在哪里？")])]),t("li",[t("a",{attrs:{href:"#_57-为什么我们的事件手动绑定this"}},[e._v("57.为什么我们的事件手动绑定this？")])]),t("li",[t("a",{attrs:{href:"#_58-为什么不能用-return-false-来阻止事件的默认行为"}},[e._v("58.为什么不能用 return false 来阻止事件的默认行为？")])]),t("li",[t("a",{attrs:{href:"#_59-react怎么通过dom元素-找到与之对应的-fiber对象的"}},[e._v("59.react怎么通过dom元素，找到与之对应的 fiber对象的？")])]),t("li",[t("a",{attrs:{href:"#_60-react-hooks比较比的是值还是内存地址"}},[e._v("60.react Hooks比较比的是值还是内存地址？")])]),t("li",[t("a",{attrs:{href:"#_61-手写防抖节流hook-》不使用usecallback-因为会把处理函数一起缓存起来-这样比如搜索用防抖节流-搜素值变化由于函数被缓存-就无法实时搜索"}},[e._v("61.手写防抖节流hook=》不使用useCallback，因为会把处理函数一起缓存起来，这样比如搜索用防抖节流，搜素值变化由于函数被缓存，就无法实时搜索")])]),t("li",[t("a",{attrs:{href:"#_62-如何理解不可变值-性-数据-immutable"}},[e._v("62.如何理解不可变值｜性｜数据(immutable)？")])]),t("li",[t("a",{attrs:{href:"#_63-如何在react中创建组件"}},[e._v("63.如何在react中创建组件？")])]),t("li",[t("a",{attrs:{href:"#_64-状态提升"}},[e._v("64.状态提升？")])]),t("li",[t("a",{attrs:{href:"#_65-react中为什么使用classname而不是class"}},[e._v("65.react中为什么使用className而不是class？")])]),t("li",[t("a",{attrs:{href:"#_66-react的super和super-props-区别"}},[e._v("66.react的super和super(props)区别？")])]),t("li",[t("a",{attrs:{href:"#_67-如何编写mapdispatchtoprops"}},[e._v("67.如何编写mapDispatchToProps()？")])]),t("li",[t("a",{attrs:{href:"#_68-react事件绑定原理"}},[e._v("68.react事件绑定原理？")])])])])])]),t("p"),e._v(" "),t("h2",{attrs:{id:"react"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react"}},[e._v("#")]),e._v(" React")]),e._v(" "),t("h3",{attrs:{id:"_1-diff算法-及虚拟dom"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-diff算法-及虚拟dom"}},[e._v("#")]),e._v(" 1.diff算法？及虚拟dom？")]),e._v(" "),t("p",[e._v("diff算法本质就是找出虚拟dom和真实dom的差异")]),e._v(" "),t("h4",{attrs:{id:"什么是调和-协调-reconciliation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是调和-协调-reconciliation"}},[e._v("#")]),e._v(" 什么是调和(协调)=>reconciliation？")]),e._v(" "),t("p",[e._v("将虚拟dom转成真实dom的过程叫做调和。diff算法就是调和的具体表现")]),e._v(" "),t("h4",{attrs:{id:"react源码划分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react源码划分"}},[e._v("#")]),e._v(" react源码划分")]),e._v(" "),t("p",[e._v("分成core，renderer，reconciler(包括了组件的挂载，卸载，更新等过程)")]),e._v(" "),t("h3",{attrs:{id:"_2-fiber是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-fiber是什么"}},[e._v("#")]),e._v(" 2.fiber是什么？")]),e._v(" "),t("p",[e._v("调和算法=>用来解决大量同步计算阻塞浏览器UI渲染的问题=>fiber本身可以看作一个js对象，fiber是链表结构(环形链表)\n是一种基于浏览器的单线程调度算法。主要用来做异步diff(虚拟dom渐进式渲染)，类似链表=》将原来的递归diff变成了遍历diff")]),e._v(" "),t("h4",{attrs:{id:"fiber结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fiber结构"}},[e._v("#")]),e._v(" fiber结构")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const fiber = {\n    stateNode, // 节点实例\n    child,     // 子节点 => 指向当前节点的第一个子节点\n    sibling,   // 兄弟节点 => 指向当前节点下一个兄弟节点\n    return     // 父节点 => 指向当前节点的父节点\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("h4",{attrs:{id:"scheduler-调度器实现任务分配-6种优先级"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scheduler-调度器实现任务分配-6种优先级"}},[e._v("#")]),e._v(" scheduler=>调度器实现任务分配=>6种优先级")]),e._v(" "),t("ul",[t("li",[e._v("synchronous => 同Stack Reconciler 同步执行")]),e._v(" "),t("li",[e._v("task => next tick之前执行")]),e._v(" "),t("li",[e._v("animation => 下一帧之前执行")]),e._v(" "),t("li",[e._v("high => 不久的将来立即执行")]),e._v(" "),t("li",[e._v("low => 稍微延迟执行也可以")]),e._v(" "),t("li",[e._v("offscreen => 下一次render时或者scroll时才执行")])]),e._v(" "),t("h4",{attrs:{id:"fiber影响"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fiber影响"}},[e._v("#")]),e._v(" fiber影响")]),e._v(" "),t("p",[e._v("fiber异步diff，任务的更新过程可能会被打断，所以在更新过程中，render及其之前的生命周期函数可能会被调用多次\n以下生命周期中不应出现副作用=>是unsafe的原因，也是钩子废弃原因")]),e._v(" "),t("ul",[t("li",[e._v("shouldComponentUpdate")]),e._v(" "),t("li",[e._v("componentWillMount(UNSAFE_componentWillMount)")]),e._v(" "),t("li",[e._v("componentWillReceiveProps(UNSAFE_componentWillReceiveProps)")]),e._v(" "),t("li",[e._v("componentWillUpdate(UNSAFE_componentWillUpdate)")])]),e._v(" "),t("h4",{attrs:{id:"react内部分层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react内部分层"}},[e._v("#")]),e._v(" react内部分层")]),e._v(" "),t("p",[e._v("virtual dom 层 => 负责页面样式\nreconciler 层 => 负责调用组件生命周期方法，进行diff计算\nrenderer 层 => 根据不同平台，渲染相同的页面 => 如reactDom和reactNative")]),e._v(" "),t("h4",{attrs:{id:"fiber原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fiber原理"}},[e._v("#")]),e._v(" fiber原理")]),e._v(" "),t("ul",[t("li",[e._v("在react16之前(使用stack reconciler(栈协调器))，当react要更新dom时，从diff到更新dom，整个过程一气呵成，不能被打断。\n当更新组件比较复杂，层级过深，此时如果用户点击了页面某个按钮，可能会因为批量更新dom还未完成，导致按钮无法响应的问题")]),e._v(" "),t("li",[e._v("react16之后使用的是fiber reconciler(纤维协调器)，将递归中无法中断的更新重构为迭异步可中断过程，这样就能更好的控制组件的渲染。\n可以分段执行(链表结构)")])]),e._v(" "),t("h4",{attrs:{id:"双缓存是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#双缓存是什么"}},[e._v("#")]),e._v(" 双缓存是什么？")]),e._v(" "),t("p",[e._v("react维护了两个fiber树")]),e._v(" "),t("ul",[t("li",[e._v("current Fiber 用于渲染页面")]),e._v(" "),t("li",[e._v("workingProgress Fiber 用在内存构建中，构建完成后直接替换current Fiber树")])]),e._v(" "),t("h4",{attrs:{id:"diff算法如何从o-n3-优化到o-n-的-》可以理解为o-n3-是传统树递归diff的时间复杂度-》基于哪两个假设"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#diff算法如何从o-n3-优化到o-n-的-》可以理解为o-n3-是传统树递归diff的时间复杂度-》基于哪两个假设"}},[e._v("#")]),e._v(" diff算法如何从O(n3)优化到O(n)的=》可以理解为O(n3)是传统树递归diff的时间复杂度=》基于哪两个假设")]),e._v(" "),t("ol",[t("li",[e._v("两个不同类型的元素会产生不同的树")]),e._v(" "),t("li",[e._v("同一层级的一组节点，他们可以通过唯一的id进行区分")])]),e._v(" "),t("h4",{attrs:{id:"如何从o-n-3-转成o-n-》基于两大假设通过三大策略来优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何从o-n-3-转成o-n-》基于两大假设通过三大策略来优化"}},[e._v("#")]),e._v(" 如何从O(n^3)转成O(n)=》基于两大假设通过三大策略来优化")]),e._v(" "),t("p",[e._v("React用三大策略将O(n^3)转成O(n)复杂度")]),e._v(" "),t("ol",[t("li",[e._v("tree diff\n只比较同一层的dom节点(忽略dom节点的跨层级移动，如果发生会直接删除旧节点使用新节点)=》只需要对树进行一次遍历就可以完成整棵树的比较")]),e._v(" "),t("li",[e._v("component diff (同一类型的组件会继续比较，不同类型的直接替换)\n同一类型的两个组件按原来层级比较的方式继续比较即可(shouldComponentUpdate可以判断是否需要计算)\n不同类型组件，会把将要被改变组件判断为脏组件(dirtyComponent)，从而替换整个组件的所有节点")]),e._v(" "),t("li",[e._v("element diff\n同一层级的一组子节点，通过唯一ID区分即key(diff提供三种节点操作：删除，移动，插入)")])]),e._v(" "),t("h3",{attrs:{id:"_3-setstate是同步还是异步-私下简单记忆-同步逻辑中就异步-异步逻辑中就同步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-setstate是同步还是异步-私下简单记忆-同步逻辑中就异步-异步逻辑中就同步"}},[e._v("#")]),e._v(" 3.setState是同步还是异步？(私下简单记忆：同步逻辑中就异步，异步逻辑中就同步)")]),e._v(" "),t("p",[e._v("在生命周期函数和合成事件中是异步的，在原生事件和setTimeout中是同步的")]),e._v(" "),t("ul",[t("li",[e._v("在react事件中是异步")]),e._v(" "),t("li",[e._v("在setTimeout或者自定义dom事件中都是同步")])]),e._v(" "),t("h4",{attrs:{id:"为什么不直接都同步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么不直接都同步"}},[e._v("#")]),e._v(" 为什么不直接都同步？")]),e._v(" "),t("p",[e._v("做成异步是为了减少频繁setState带来的性能损耗=》setState会重新渲染页面")]),e._v(" "),t("h4",{attrs:{id:"什么是合成事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是合成事件"}},[e._v("#")]),e._v(" 什么是合成事件？")]),e._v(" "),t("ul",[t("li",[e._v("提供统一API去抹平浏览器差异，所有事件都绑定在React根元素(Root Element)进行事件委托，不是绑在元素上")]),e._v(" "),t("li",[e._v("比如onChange事件就是合成事件(在react中onChange也有OnInput的功能，多个原生js事件的合成事件)")])]),e._v(" "),t("h4",{attrs:{id:"为什么不能直接更新状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么不能直接更新状态"}},[e._v("#")]),e._v(" 为什么不能直接更新状态？")]),e._v(" "),t("p",[e._v("不能触发UI重新渲染=》setState里面有做处理")]),e._v(" "),t("h3",{attrs:{id:"_4-ui组件与容器组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-ui组件与容器组件"}},[e._v("#")]),e._v(" 4.UI组件与容器组件？")]),e._v(" "),t("ul",[t("li",[e._v("UI组件： 只负责UI，没有业务逻辑，没有状态，数据由props提供，不使用redux的api")]),e._v(" "),t("li",[e._v("容器组件：负责管理数据和业务逻辑，不负责UI，有内部状态，使用redux的api\n=》容器组件用来处理获取数据，订阅redux存储等的组件，里面没有html")])]),e._v(" "),t("h3",{attrs:{id:"_5-todo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-todo"}},[e._v("#")]),e._v(" 5.//TODO")]),e._v(" "),t("h3",{attrs:{id:"_6-生命周期-只针对类-函数式组件无生命周期-》括号里都是react16以后的钩子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-生命周期-只针对类-函数式组件无生命周期-》括号里都是react16以后的钩子"}},[e._v("#")]),e._v(" 6.生命周期(只针对类，函数式组件无生命周期)=》括号里都是react16以后的钩子")]),e._v(" "),t("h4",{attrs:{id:"初始化-挂载期-一个组件实例初次被创建的过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#初始化-挂载期-一个组件实例初次被创建的过程"}},[e._v("#")]),e._v(" 初始化(挂载期)：一个组件实例初次被创建的过程")]),e._v(" "),t("ul",[t("li",[e._v("constructor:(先super(props))初始化state\n(static getDerivedStateFromProps替代componentWillMount，旧的即将废弃)")]),e._v(" "),t("li",[e._v("componentWillMount:render前最后一次修改状态的机会，可以用来做状态计算或处理，只走一次，在渲染前调用=>过时")]),e._v(" "),t("li",[e._v("render:只能访问this.props和this.stat，不允许修改状态和dom")]),e._v(" "),t("li",[e._v("componentDidMount(CDM):成功render并渲染完成真实dom之后会触发(第一次渲染后调用)，可以修改dom，只走一次，可以用来放setTimeout，setInterval或者ajax请求")])]),e._v(" "),t("h4",{attrs:{id:"源码过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#源码过程"}},[e._v("#")]),e._v(" 源码过程")]),e._v(" "),t("p",[e._v("constructor(构造函数，初始化状态值)->getInitialState(设置状态机)->getDefaultProps(获取默认的props)->UNSAFE_componentWillMount(首次渲染前执行)\n->render(渲染组件)->componentDidMount(render渲染之后执行的操作)")]),e._v(" "),t("h4",{attrs:{id:"运行中-更新期-组件在创建后再次渲染的过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行中-更新期-组件在创建后再次渲染的过程"}},[e._v("#")]),e._v(" 运行中(更新期)：组件在创建后再次渲染的过程")]),e._v(" "),t("p",[e._v("(static getDerivedStateFromProps 替代componentWillReceiveProps， 旧的即将废弃)")]),e._v(" "),t("ul",[t("li",[e._v("componentWillReceiveProps:父组件修改属性触发，会最先获得父组件传来的属性=>提供了最新的props，此时的this.props是老的=》过时\n=》在组件收到一个新props(更新后)调用，初始化render时不调用")]),e._v(" "),t("li",[e._v("shouldComponentUpdate(SCU):返回boolean值，返回false阻止render调用，在组件接受到新props或state时调用(初始化或者forceUpdate时不调用)\n=》通俗来说状态不变不更新false，状态改变要更新true=》提供了最新的props和最新的state，此时的this.state是老状态\n(getSnapshotBeforeUpdate替代componentWillUpdate， 旧的即将废弃)")]),e._v(" "),t("li",[e._v("componentWillUpdate:不能修改属性和状态，在组件收到新props或者state但还没render时调用，初始化不调用=>过时")]),e._v(" "),t("li",[e._v("render:只能访问this.props和this.stat，不能修改状态和dom")]),e._v(" "),t("li",[e._v("componentDidUpdate(CDU):组件更新完成后立即调用，初始化不调用可以修改dom=》该方法还提供了老的props和老的state=》可以通过比较新老数据异同来决定是否触发操作")])]),e._v(" "),t("h4",{attrs:{id:"源码过程-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#源码过程-2"}},[e._v("#")]),e._v(" 源码过程")]),e._v(" "),t("p",[e._v("UNSAFE_componentsWillReceiveProps(当父组件更新子组件state时，该方法会被调用)\n->shouldComponentUpdate(该方法决定组件state或props的改变是否需要重新渲染组件)\n->UNSAFE_componentWillUpdate(在组件接收新的state或者props时，重新渲染之前调用该方法)\n->componentDidUpdate(在组件重新渲染后调用该方法)")]),e._v(" "),t("h4",{attrs:{id:"销毁-卸载期-组件在使用完被销毁的过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#销毁-卸载期-组件在使用完被销毁的过程"}},[e._v("#")]),e._v(" 销毁(卸载期)：组件在使用完被销毁的过程")]),e._v(" "),t("ul",[t("li",[e._v("componentWillUnmount(用来将组件从DOM树删除):组件从dom移除时立即调用=》在删除组件之前进行清理操作，清除计时器或事件监听")])]),e._v(" "),t("h4",{attrs:{id:"unsafe"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unsafe"}},[e._v("#")]),e._v(" UNSAFE")]),e._v(" "),t("p",[e._v("unsafe的生命周期都属于fiber的第一阶段，这个阶段优先级都比较低，有可能被打断，将来可能被执行多次，所以不安全")]),e._v(" "),t("h4",{attrs:{id:"新生命周期-目的就是解决老生命周期三个unsafe生命周期的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新生命周期-目的就是解决老生命周期三个unsafe生命周期的问题"}},[e._v("#")]),e._v(" 新生命周期=>目的就是解决老生命周期三个unsafe生命周期的问题")]),e._v(" "),t("p",[e._v("getDerivedStateFromProps()会在初始化挂载和更新(自身状态更新或父状态更新)时触发，在dom渲染前调用=》可以获取最新的props和state，是类属性，前面要加static，没有this，需要返回值没有就返回null\n=>在初始化可以代替componentWillMount,在父传子的时候可以代替componentWillReceiveProps\ngetSnapshotBeforeUpdate代替componentWillUpdate(不能同时使用)，在update发生时，在render之后dom渲染前返回值，作为componentDidUpdate的第三个参数\n=》可以用来做滚动条定位，页面刷新仍然保持原来的滚动条")]),e._v(" "),t("h4",{attrs:{id:"错误阶段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#错误阶段"}},[e._v("#")]),e._v(" 错误阶段")]),e._v(" "),t("p",[e._v("(static getDerivedStateFromError)\n(componentDidCatch)")]),e._v(" "),t("h3",{attrs:{id:"_7-react脚手架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-react脚手架"}},[e._v("#")]),e._v(" 7.react脚手架")]),e._v(" "),t("ul",[t("li",[e._v("create-react-app(npx create-react-app 项目名)")]),e._v(" "),t("li",[e._v("umijs")])]),e._v(" "),t("h4",{attrs:{id:"区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[e._v("#")]),e._v(" 区别")]),e._v(" "),t("ul",[t("li",[e._v("create-react-app不包含路由，但是在webpack打包层的优化做了比较多")]),e._v(" "),t("li",[e._v("而umi是以路由为基础的(实现了完整的生命周期),但兼容性不如create-react-app(不支持ie8以下，react16.8以下也不支持)")]),e._v(" "),t("li",[e._v("umi创建的项目结构更复杂，原来的会更简单些=>umi开箱即用")])]),e._v(" "),t("h4",{attrs:{id:"react最流行的css-in-js库"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react最流行的css-in-js库"}},[e._v("#")]),e._v(" react最流行的css in js库")]),e._v(" "),t("p",[e._v("emotion，styled-components")]),e._v(" "),t("h3",{attrs:{id:"_8-shouldcomponentupdate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-shouldcomponentupdate"}},[e._v("#")]),e._v(" 8.shouldComponentUpdate？")]),e._v(" "),t("ul",[t("li",[e._v("render()函数决定组件该渲染什么，shouldComponentUpdate决定组件什么时候不需要渲染")]),e._v(" "),t("li",[e._v("react的component提供了shouldComponentUpdate的默认实现，会返回一个true代表每次更新都要调用所有生命周期函数=》")]),e._v(" "),t("li",[e._v("所以我们通过自定义shouldComponentUpdate方法，使它在需要更新的时候才返回true，这样达到一个性能优化的效果")]),e._v(" "),t("li",[e._v("只要组件的completed和text没变，就可以让shouldComponentUpdate返回false")]),e._v(" "),t("li",[e._v("react-redux默认实现对比props方面采用了浅比较(不采用深比较是因为性能消耗的问题=》可以通过immutable这个库来实现深比较)")])]),e._v(" "),t("h4",{attrs:{id:"结论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结论"}},[e._v("#")]),e._v(" 结论")]),e._v(" "),t("p",[e._v("可以在shouldComponentUpdate使用浅比较来比较prop，深比较通过Immutable这个库来实现")]),e._v(" "),t("h3",{attrs:{id:"_9-react-router-dom和react-router区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-react-router-dom和react-router区别"}},[e._v("#")]),e._v(" 9.react-router-dom和react-router区别？")]),e._v(" "),t("p",[e._v("react-router-dom是在react-router基础上开发的，额外提供了BrowserRouter,HashRouter,Link,NavLink组件用来路由跳转")]),e._v(" "),t("ul",[t("li",[e._v("(browserRouter,hashRouter替代了router，link和NavLink作用类似a标签)")]),e._v(" "),t("li",[e._v("browserRouter是history模式，hashRouter是hash模式")]),e._v(" "),t("li",[e._v("Redirect用来强制路由重定向")]),e._v(" "),t("li",[e._v("Switch用来组合路由")])]),e._v(" "),t("h4",{attrs:{id:"react-dom"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react-dom"}},[e._v("#")]),e._v(" react-dom")]),e._v(" "),t("p",[e._v("用来操作dom")]),e._v(" "),t("h4",{attrs:{id:"react-dom常用api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react-dom常用api"}},[e._v("#")]),e._v(" react-dom常用api")]),e._v(" "),t("ul",[t("li",[e._v("createPortal()=>传送门，该节点在dom组件层次结构外")]),e._v(" "),t("li",[e._v("render()用来将react元素渲染到container提供的dom中")])]),e._v(" "),t("h3",{attrs:{id:"_10-setstate时发生了什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-setstate时发生了什么"}},[e._v("#")]),e._v(" 10.setState时发生了什么？")]),e._v(" "),t("p",[e._v("(每次setState，组件会重新渲染)")]),e._v(" "),t("ul",[t("li",[e._v("在函数式组件中setState时，如果两次设置的state相同时，组件不会重新渲染")]),e._v(" "),t("li",[e._v("在事件中多次调用setState，会批量进行渲染")]),e._v(" "),t("li",[e._v("在事件外多次调用setState，不会重新渲染")]),e._v(" "),t("li",[e._v("react18后同一函数多次调用setState都会批量渲染")])]),e._v(" "),t("h4",{attrs:{id:"setstate之后发生什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#setstate之后发生什么"}},[e._v("#")]),e._v(" setState之后发生什么？")]),e._v(" "),t("ol",[t("li",[e._v("传入的参数和组件当前状态合并，触发调和")]),e._v(" "),t("li",[e._v("根据新状态构建react元素树")]),e._v(" "),t("li",[e._v("得到元素树后会重新计算新老树差异，然后按需更新=》不用全部重新渲染")])]),e._v(" "),t("h3",{attrs:{id:"_11-怎么理解在react中-一切都是属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-怎么理解在react中-一切都是属性"}},[e._v("#")]),e._v(" 11.怎么理解在react中，一切都是属性？")]),e._v(" "),t("p",[e._v("组件会将UI分成多个独立的部分，每个组件彼此独立")]),e._v(" "),t("h3",{attrs:{id:"_12-todo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-todo"}},[e._v("#")]),e._v(" 12.//TODO")]),e._v(" "),t("h3",{attrs:{id:"_13-常见hooks功能-react-16-8引入了hooks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-常见hooks功能-react-16-8引入了hooks"}},[e._v("#")]),e._v(" 13.常见hooks功能(react 16.8引入了hooks)")]),e._v(" "),t("p",[e._v("hook只能在顶层使用，不能在循环，条件或嵌套函数中使用\n1.useState声明变量：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class中this.state = {count: 0}\nhook中const [count, setCount] = useState(0)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("2.useEffect用来处理副作用，useLayoutEffect同步处理副作用=>不能在useEffect中使用useState\n=>函数会在组件渲染后执行(网络请求，dom操作都属于副作用)")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("useEffect(()  =>  {\n// Async Action\n}, [dependencies，为空数组表示不依赖，数组有值该值改变会再次触发useEffect])\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[e._v("如果传空数组只执行一次，可以通过return一个函数来对定时器进行销毁")]),e._v(" "),t("h4",{attrs:{id:"useeffect和uselayouteffect区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#useeffect和uselayouteffect区别"}},[e._v("#")]),e._v(" useEffect和useLayoutEffect区别？")]),e._v(" "),t("p",[e._v("调用时机不同，useLayoutEffect和原来componentDidMount和ComponentDidUpdate一致，在dom更新后马上调用，会阻塞页面渲染，useEffect是等整个页面渲染完才调用，官方建议用useEffect\n=》实际开发中，如果useEffect操作dom导致页面抖动，可以把操作dom部分放到useLayoutEffect中，这样就只会触发一次重绘和重排\n=》useLayoutEffect先于useEffect执行\n3.useCallback")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("useCallback(() => {\n}, [dependencies,为空数组在第一次创建后就被缓存后续不改变，不传入第二个参数每次都会重新调用])\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br")])]),t("p",[e._v("用来优化性能，能够对函数进行缓存(不执行)，只有依赖的数据发生变化，才会重新缓存新的回调函数\n4.useMemo=》不推荐所有组件都进行缓存，大量组件初始化时被缓存，会导致过多的内存消耗，影响初始化渲染速度=>不能进行有副作用的操作，如网络请求\n用来优化性能，依赖不变的情况下，会返回相同的引用，避免子组件重复渲染，可以完全替代useCallback，区别是useMemo会直接返回函数结果")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const memoizedValue = useMemo(() => 计算函数(a, b), [a, b依赖]); 返回一个缓存值\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("5.useRef\nuseRef(0)=》能设置初始值 这个方法用来获取组件实例或dom元素\n=》创建ref可以通过createRef和useRef")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const refContainer = useRef(initialValue);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("6.useContext\n组件间共享状态，子组件(消费者)可以通过useContext()获取父组件的属性，生产者还是通过React.createContext去创建context对象")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const value = useContext(MyContext);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("7.useReducer=》先有redux后有useReducer=》不支持异步，异步使用redux=》作用是在复杂场景下替换useState")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const [state, dispatch] = useReducer(reducer函数, 初始值); \n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("reducer函数可以获得之前的state和dispatch传递的参数reducer(prevState, 传递的参数)")]),e._v(" "),t("h4",{attrs:{id:"usestate和usereducer区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#usestate和usereducer区别"}},[e._v("#")]),e._v(" useState和useReducer区别？")]),e._v(" "),t("ul",[t("li",[e._v("useState如果初始值是函数返回值要通过回调函数的方式设置，直接设置会导致没有重新赋值但获取初始值的函数重复执行=>通过getCount获取初始值，重复执行getCount")]),e._v(" "),t("li",[e._v("useReducer初始值如果通过函数返回，当组件重新渲染时会重复执行这个函数")]),e._v(" "),t("li",[e._v("useState修改状态，同个useState声明的状态会被覆盖，而useReducer会按顺序执行=>setCount(2)两次一个是2，一个是4")])]),e._v(" "),t("h4",{attrs:{id:"usememo和usecallback区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#usememo和usecallback区别"}},[e._v("#")]),e._v(" useMemo和useCallback区别？")]),e._v(" "),t("p",[e._v("useCallback第一次不会执行函数，只是缓存函数，useMemo会执行并把执行结果返回")]),e._v(" "),t("h4",{attrs:{id:"自定义hooks钩子-》作用是逻辑复用-允许没有返回值-》只能在函数组件和其他hooks中调用-同时其他hook也只能在自定义hook内部调用-如果用普通函数抽离逻辑去处理没办法使用hooks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义hooks钩子-》作用是逻辑复用-允许没有返回值-》只能在函数组件和其他hooks中调用-同时其他hook也只能在自定义hook内部调用-如果用普通函数抽离逻辑去处理没办法使用hooks"}},[e._v("#")]),e._v(" 自定义hooks钩子=》作用是逻辑复用，允许没有返回值=》只能在函数组件和其他hooks中调用，同时其他hook也只能在自定义hook内部调用(如果用普通函数抽离逻辑去处理没办法使用hooks)")]),e._v(" "),t("p",[e._v("自定义钩子必须以use开头，函数内部可以调用其他hook")]),e._v(" "),t("h4",{attrs:{id:"实例-》可以自定义逻辑性和功能性的hooks-两组件使用相同的hook不会共享状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例-》可以自定义逻辑性和功能性的hooks-两组件使用相同的hook不会共享状态"}},[e._v("#")]),e._v(" 实例=》可以自定义逻辑性和功能性的hooks=>两组件使用相同的hook不会共享状态")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 逻辑性hooks 获取列表后通过useList()获取返回值\nfunction useList() {\n    const [list,setList] = setState([])\n    useEffect(()=> {\n        axios({}).then(res=> {\n            setList(res)\n        })\n    }, [])\n    return {list}\n}\nfunction app() {\n    const {list} = useList()\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br")])]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 功能性hooks\nconst useWidth = () => {\n    const [width, setWidth] = useState(window.innerWidth)\n    const onResize = () => {\n        setWidth(window.innerWidth)\n    }\n    useEffect(() => {\n        window.addEventListener('resize', onResize)\n        return () => {\n            window.removeEventListener('resize', onResize)\n        }\n    }, [])\n    return {width}\n}\n// 页面上通过const {width} = useWidth()拿到width 然后在html上使用<button width={width}/>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br")])]),t("h4",{attrs:{id:"usestate为什么要使用数组-不用对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#usestate为什么要使用数组-不用对象"}},[e._v("#")]),e._v(" *useState为什么要使用数组，不用对象？")]),e._v(" "),t("p",[e._v("降低使用的复杂度，因为使用对象的话使用多次就需要通过取别名的方式")]),e._v(" "),t("h4",{attrs:{id:"为什么使用hooks-官方更推荐用hooks写法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用hooks-官方更推荐用hooks写法"}},[e._v("#")]),e._v(" 为什么使用hooks？(官方更推荐用hooks写法)")]),e._v(" "),t("ul",[t("li",[e._v("高阶组件为了复用，使得代码层级更复杂")]),e._v(" "),t("li",[e._v("生命周期复杂")]),e._v(" "),t("li",[e._v("函数式组件无状态，如果需要状态就要改成类组件，不方便=》主要原因")]),e._v(" "),t("li",[e._v("*不用操心this指向问题")])]),e._v(" "),t("h4",{attrs:{id:"hooks原理-》基于fiber-在fiber节点上放一个链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hooks原理-》基于fiber-在fiber节点上放一个链表"}},[e._v("#")]),e._v(" hooks原理=》基于fiber，在fiber节点上放一个链表")]),e._v(" "),t("p",[e._v("。对于effect副作用钩子，会绑定在workInProgress.updateQueue上，等到commit阶段，dom树会构建完成，再去执行每个effect副作用钩子\n核心：hooks主要通过闭包来保存状态，使用链表保存hooks\n初始化：renderWithHooks执行函数组件\nmount阶段：")]),e._v(" "),t("ul",[t("li",[e._v("每个hooks都会通过mountWorkInProgressHook生成一个hook对象，每个hooks以链表的形式保存(.next)，赋值给workInProgress(Fiber节点)的memoizedState属性")]),e._v(" "),t("li",[e._v("每个hook对象包含memoizedState(useState保存state|useEffect保存effect对象|useMemo保存缓存值和deps|useRef保存ref对象)，\nbaseQueue(useState和useReducer中保存最新的更新队列),baseState(useState和useReducer一次更新产生的最新state值),queue(保存待更新队列pendingQueue，更新函数dispatch信息)，\nnext(指向下一个hooks对象)\n(mountState初始化useState，dispatchAction控制无状态组件更新，mountEffect初始化useEffect，mountMemo初始化useMemo，mountRef初始化useRef)\nupdate阶段：")]),e._v(" "),t("li",[e._v("通过updateWorkInProgressHook更新hooks链表，找到对应hooks")]),e._v(" "),t("li",[e._v("updateState得到最新state")]),e._v(" "),t("li",[e._v("updateEffect更新updateQueue")]),e._v(" "),t("li",[e._v("updateMemo判断deps，获取/更新缓存")]),e._v(" "),t("li",[e._v("updateRef更新ref对象")])]),e._v(" "),t("h4",{attrs:{id:"hook中的memoizedstate和fiber中的memoizedstate区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hook中的memoizedstate和fiber中的memoizedstate区别"}},[e._v("#")]),e._v(" hook中的memoizedState和fiber中的memoizedState区别？")]),e._v(" "),t("p",[e._v("hook中是用来保存state值，fiber中是指向当前fiber下hook队列的首个hook，因为hook是链表结构，通过这个hook可以访问整个hook队列")]),e._v(" "),t("h3",{attrs:{id:"_14-hooks如何模拟componentdidmount"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-hooks如何模拟componentdidmount"}},[e._v("#")]),e._v(" 14.hooks如何模拟componentDidMount？")]),e._v(" "),t("p",[e._v("使用useEffect，把第二个参数设为[] =》useEffect(callback,[])=》只在初次渲染时调用，如果不设置第二个参数每次都会调用")]),e._v(" "),t("h4",{attrs:{id:"useeffect模拟componentdidupdate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#useeffect模拟componentdidupdate"}},[e._v("#")]),e._v(" useEffect模拟componentDidUpdate")]),e._v(" "),t("ul",[t("li",[e._v("使用条件判断依赖是否是初始值，不是就走更新逻辑=》缺点是多个依赖项需要多次比较")]),e._v(" "),t("li",[e._v("使用useRef设置一个初始值进行比较")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('const mounting = useRef(true);\n   useEffect(() => {\n      if (mounting.current) {\n          console.log("初次")\n          mounting.current = false;\n          return \n      }\n      console.log("DidUpdated")\n});\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br")])]),t("h3",{attrs:{id:"_15-hooks如何部分替代redux功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-hooks如何部分替代redux功能"}},[e._v("#")]),e._v(" 15.hooks如何部分替代redux功能？")]),e._v(" "),t("p",[e._v("useReducer + useContext =》 客户端全局store")]),e._v(" "),t("h3",{attrs:{id:"_16-react函数式组件优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-react函数式组件优点"}},[e._v("#")]),e._v(" 16.react函数式组件优点？")]),e._v(" "),t("ul",[t("li",[e._v("类组件需要创建类实例性能消耗大，函数式组件不需要")]),e._v(" "),t("li",[e._v("函数式组件更简单易理解")])]),e._v(" "),t("h3",{attrs:{id:"_17-react在1s内点击按钮多次-怎么获得最后一次的更新状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-react在1s内点击按钮多次-怎么获得最后一次的更新状态"}},[e._v("#")]),e._v(" 17.react在1s内点击按钮多次，怎么获得最后一次的更新状态？")]),e._v(" "),t("p",[e._v("setState支持两种语法")]),e._v(" "),t("ul",[t("li",[e._v("setState(updater, cb) => 接受函数类型，返回一个对象")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("this.setState((state) => { //没有 this\n    return { count: state.count + 1 };   //2\n});\nthis.setState((state) => { // 没有 this\n    return { count: state.count + 1 };   //2\n});\n结果是+2\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("ul",[t("li",[e._v("setState(stateChange, cb) => 接受对象类型=》会对多个setState进行批处理更新")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("this.setState({\n    count:this.state.count+1   // 1\n})\nthis.setState({\n    count:this.state.count+1    //2\n})\n结果是+1\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("ul",[t("li",[e._v("直接通过this.state.count修改值不会触发页面更新")]),e._v(" "),t("li",[e._v("state发生变化会触发生命周期，当render(或shouldComponentUpdate返回false)之后this.state才更新")])]),e._v(" "),t("h3",{attrs:{id:"_18-react和vue中受控组件和不受控组件区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18-react和vue中受控组件和不受控组件区别"}},[e._v("#")]),e._v(" 18.react和vue中受控组件和不受控组件区别？")]),e._v(" "),t("ul",[t("li",[e._v("受控组件一般需要初始状态和一个状态更新函数(onChange触发)")]),e._v(" "),t("li",[e._v("非受控组件只在初始化接受外部数据，通过ref去获取值")]),e._v(" "),t("li",[e._v("简单说受控组件由state控制，需要事件去更新，非受控组件比如在input，输入值页面就显示最新值，受控组件就不能显示")]),e._v(" "),t("li",[e._v("组件的数据渲染是否被props完全控制，控制则为受控组件，否则为非受控组件")])]),e._v(" "),t("h3",{attrs:{id:"_19-说说对redux了解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_19-说说对redux了解"}},[e._v("#")]),e._v(" 19.说说对redux了解？")]),e._v(" "),t("p",[e._v("redux就是react的状态管理工具=>基于js，其他框架也可以使用=>是flux架构思想的一种实现=》flux由这几部分组成(actions,dispatcher,stores,action，views)")]),e._v(" "),t("ul",[t("li",[e._v("flux是单向数据流")]),e._v(" "),t("li",[e._v("action中的payload时可选的，type必填，action将其转发给reducer，当reducer收到后，通过switch...case比较action中的type，对相应的内容返回新的state")]),e._v(" "),t("li",[e._v("当redux状态更改时，连接到redux的组件将接受新的状态作为props。当组件接受到这些props时，它将进入更新阶段并重新渲染UI")]),e._v(" "),t("li",[e._v("ReactComponents=》actions=》Reducers=》store=》ReactComponents")]),e._v(" "),t("li",[e._v("通过store存储，createStore来生成store，store.getState就能拿到当前的数据")]),e._v(" "),t("li",[e._v("action: {type: ''} type是必有的属性 表示action名称")]),e._v(" "),t("li",[e._v("store.dispatch({type: ''})=>里面是action对象")]),e._v(" "),t("li",[e._v("reducer是个函数，reducer = (state,action) => {return newState} 返回的是新的state")]),e._v(" "),t("li",[e._v("store.subscribe(listener)=》设置监听函数")])]),e._v(" "),t("h4",{attrs:{id:"组件如何与redux连接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组件如何与redux连接"}},[e._v("#")]),e._v(" 组件如何与redux连接？")]),e._v(" "),t("ul",[t("li",[e._v("mapStateProps：将state映射到props上，只要state发生变化，新state会重新映射props(订阅store方式)")]),e._v(" "),t("li",[e._v("mapDispatchToProps:将action creators绑定到props上，可以通过props.actions.xxx来触发")]),e._v(" "),t("li",[e._v("connect用来连接store")])]),e._v(" "),t("h4",{attrs:{id:"工作流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工作流"}},[e._v("#")]),e._v(" 工作流")]),e._v(" "),t("p",[e._v("通过dispatch(action)到store，store通过reducer函数根据action进行相应的处理，然后再返回(UI)=》先subscribe订阅后dispatch触发")]),e._v(" "),t("h4",{attrs:{id:"核心原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#核心原理"}},[e._v("#")]),e._v(" 核心原理")]),e._v(" "),t("p",[e._v("主要是返回三个函数：subscribe订阅，dispatch触发，getState返回最新的状态")]),e._v(" "),t("ul",[t("li",[e._v("内部维护了一个数组，subscribe把回调函数保存在数组中")]),e._v(" "),t("li",[e._v("内部有老的state，dispatch会根据action在reducer中做相应处理然后更新state(新的state由reducer返回)，再依次执行数组中的回调函数")]),e._v(" "),t("li",[e._v("最后可以通过getState获取最新的state")])]),e._v(" "),t("h4",{attrs:{id:"redux和react-redux关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redux和react-redux关系"}},[e._v("#")]),e._v(" redux和react-redux关系")]),e._v(" "),t("p",[e._v("react-redux目的是在组件上层传入store，下层通过dispatch去更新store的state，与redux本身没有关系")]),e._v(" "),t("h4",{attrs:{id:"redux主要api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redux主要api"}},[e._v("#")]),e._v(" redux主要api")]),e._v(" "),t("ul",[t("li",[e._v("createStore()创建store")]),e._v(" "),t("li",[e._v("combineReducers()组合reduces")]),e._v(" "),t("li",[e._v("applyMiddleware()引入中间件")]),e._v(" "),t("li",[e._v("getState()")]),e._v(" "),t("li",[e._v("dispatch(action)")]),e._v(" "),t("li",[e._v("subscribe(listener)")])]),e._v(" "),t("h4",{attrs:{id:"react-redux主要api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react-redux主要api"}},[e._v("#")]),e._v(" react-redux主要api")]),e._v(" "),t("ul",[t("li",[e._v("provider")]),e._v(" "),t("li",[e._v("connect组件包裹，被包裹的组件获得redux的state和action，返回一个高阶组件=》通过props.xxx去获得reducer返回的值")]),e._v(" "),t("li",[e._v("useStore，useSelector，useDispatch=》要在provider包裹的组件内使用")])]),e._v(" "),t("h4",{attrs:{id:"三大原则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三大原则"}},[e._v("#")]),e._v(" 三大原则")]),e._v(" "),t("ol",[t("li",[e._v("state以单一对象存储在store对象中")]),e._v(" "),t("li",[e._v("state只读(每次只返回一个新对象)")]),e._v(" "),t("li",[e._v("使用纯函数(reducer)执行state更新")])]),e._v(" "),t("h4",{attrs:{id:"纯函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#纯函数"}},[e._v("#")]),e._v(" 纯函数")]),e._v(" "),t("ol",[t("li",[e._v("对外界没有副作用=》副作用就是调用函数后影响了原来传入的对象，不影响就没有副作用")]),e._v(" "),t("li",[e._v("同样的输入得到同样的输出")])]),e._v(" "),t("h4",{attrs:{id:"副作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#副作用"}},[e._v("#")]),e._v(" 副作用")]),e._v(" "),t("p",[e._v("一个函数如果同样的输入得到不同的输出就可以说这个函数是包含副作用的")]),e._v(" "),t("h4",{attrs:{id:"函数式编程核心概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程核心概念"}},[e._v("#")]),e._v(" 函数式编程核心概念")]),e._v(" "),t("ul",[t("li",[e._v("不可变性:数据不可改变，可以通过Object.assign拷贝并返回新对象")]),e._v(" "),t("li",[e._v("纯函数")]),e._v(" "),t("li",[e._v("数据转换:.join()|.filter()|.map()都是返回新的数组或对象，不改变原有对象")]),e._v(" "),t("li",[e._v("高阶函数:将函数作为参数或返回函数的函数")]),e._v(" "),t("li",[e._v("递归+组合:将较小函数组合成更大的函数")])]),e._v(" "),t("h4",{attrs:{id:"异步中间件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异步中间件"}},[e._v("#")]),e._v(" 异步中间件")]),e._v(" "),t("p",[e._v("redux-thunk=>是对象就直接向下执行(相当于没做任何处理)，是函数会先执行，在函数内部去调用dispatch=>要在createStore的时候通过applyMiddleware进行配置\n=>源码通过typeof action === 'function' 判断是否是函数")]),e._v(" "),t("h4",{attrs:{id:"react-redux"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react-redux"}},[e._v("#")]),e._v(" react-redux")]),e._v(" "),t("p",[e._v("connect高阶组件(HOC=》Higher-order-component)，第二个参数可以传给子组件的回调函数")]),e._v(" "),t("h4",{attrs:{id:"redux-saga-和redux-thunk一样都是异步中间件-使用saga需要去学习-thunk通过promise使用更容易上手"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redux-saga-和redux-thunk一样都是异步中间件-使用saga需要去学习-thunk通过promise使用更容易上手"}},[e._v("#")]),e._v(" redux-saga=>和redux-thunk一样都是异步中间件，使用saga需要去学习，thunk通过promise使用更容易上手")]),e._v(" "),t("ul",[t("li",[e._v("全局监听器和接收器使用generator和saga自身的一些辅助函数实现对整个流程的管控")]),e._v(" "),t("li",[e._v("也是中间件需要通过applyMiddleware进行配置=>通过.run(watchSaga)调用监听函数")]),e._v(" "),t("li",[e._v("通过all函数可以同时监听多个watchSaga")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function *watchSaga() {\n   while(true) {\n       // take监听组件的action\n       yield take(action)\n       // fork同步执行异步函数getList\n       yield fork(getList)\n   }\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])]),t("h3",{attrs:{id:"_20-react17-》最新是18-22年三月发布"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20-react17-》最新是18-22年三月发布"}},[e._v("#")]),e._v(" 20.react17=》最新是18(22年三月发布)")]),e._v(" "),t("p",[e._v("react使用jsx，jsx的script属性是text/babel，允许html和js混写")]),e._v(" "),t("h3",{attrs:{id:"_21-useeffect和componentdidmount差异"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_21-useeffect和componentdidmount差异"}},[e._v("#")]),e._v(" 21.useEffect和componentDidMount差异？")]),e._v(" "),t("p",[e._v("useEffect会捕获到props和state")]),e._v(" "),t("h3",{attrs:{id:"_22-ref"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22-ref"}},[e._v("#")]),e._v(" 22.ref？")]),e._v(" "),t("ul",[t("li",[e._v('旧版：组件上 ref="username"  通过this.refs.username去获取 =>严格模式不允许使用')]),e._v(" "),t("li",[e._v("新版：声明myRef = React.createRef()  再组件上 ref={this.myRef} 通过this.myRef.current去获取")])]),e._v(" "),t("h4",{attrs:{id:"refs作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#refs作用"}},[e._v("#")]),e._v(" refs作用")]),e._v(" "),t("p",[e._v("返回对元素的引用=》可以用来操作dom和获取组件实例")]),e._v(" "),t("h3",{attrs:{id:"_23-组件通信"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_23-组件通信"}},[e._v("#")]),e._v(" 23.组件通信")]),e._v(" "),t("p",[e._v("父子通信：props=》父向子 子向父通过调用props传过来的方法，让父组件来更新")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 子组件: Child\nconst Child = props =>{\n  const cb = msg =>{\n      return ()=>{\n          props.callback(msg)\n      }\n  }\n  return (\n      <button onClick={cb("京程一灯欢迎你!")}>京程一灯欢迎你</button>\n  )\n}\n// 父组件 Parent\nclass Parent extends Component {\n    callback(msg){\n        console.log(msg)\n    }\n    render(){\n        return <Child callback={this.callback.bind(this)}></Child>    \n    }\n}\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br")])]),t("p",[e._v("非父子：")]),e._v(" "),t("ol",[t("li",[e._v("context进行跨层级通信 createContext创建上下文 useContext使用上下文")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let GlobalContext = React.createContext()\n然后在父组件上包装一个provide\n<GlobalContext.Provider>\n<aa/>\n</GlobalContext.Provider value={{info: 'xx'}}>\n接收者通过接收\n<GlobalContext.Consumer>\n{(value) => {\n    return <div>111</div>\n}}\n</GlobalContext.Consumer>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[e._v("发布订阅模式 subscribe进行订阅，通过publish进行发布")]),e._v(" "),t("li",[e._v("状态提升(中间人模式) =>子传父 再由父传给相应组件")])]),e._v(" "),t("h3",{attrs:{id:"_24-父组件如何调用子组件方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_24-父组件如何调用子组件方法"}},[e._v("#")]),e._v(" 24.父组件如何调用子组件方法？")]),e._v(" "),t("ul",[t("li",[e._v("react >=16.8 函数中使用通过useRef")]),e._v(" "),t("li",[e._v("react >=16.4 类中使用通过createRef")])]),e._v(" "),t("h3",{attrs:{id:"_25-性能优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_25-性能优化"}},[e._v("#")]),e._v(" 25.性能优化")]),e._v(" "),t("h4",{attrs:{id:"类组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类组件"}},[e._v("#")]),e._v(" 类组件：")]),e._v(" "),t("ul",[t("li",[e._v("shouldComponentUpdate生命周期函数来自定义渲染逻辑")]),e._v(" "),t("li",[e._v("pureComponent(纯组件)会自动比较新旧props和state，决定shouldComponentUpdate返回true或false，从而决定要不要render\n=》React.component内部没有实现shouldComponentUpdate不会自动比较=》等同于React.memo都是浅比较")])]),e._v(" "),t("h4",{attrs:{id:"函数组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数组件"}},[e._v("#")]),e._v(" 函数组件：")]),e._v(" "),t("ul",[t("li",[e._v("react.memo高阶函数包装组件=》HOC=》接收组件A作为参数并返回一个组件B，组件B的props没有改变，组件B就是阻止组件A重新渲染(浅比较)=》也可用于类组件\n=>通过React.memo(组件)对组件进行包裹=>第二个参数可以自定义比较函数")]),e._v(" "),t("li",[e._v("useMemo原理和pureComponent一样，都是自动比较props")]),e._v(" "),t("li",[e._v("useCallBack")])]),e._v(" "),t("h4",{attrs:{id:"usememo和react-memo区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#usememo和react-memo区别"}},[e._v("#")]),e._v(" useMemo和react.memo区别？")]),e._v(" "),t("ul",[t("li",[e._v("react.memo是hoc，useMemo是个hook")]),e._v(" "),t("li",[e._v("使用React.memo返回的是一个组件，只要props没有改变就不会重新渲染")]),e._v(" "),t("li",[e._v("使用useMemo当依赖项不变返回的就是缓存的值，避免重新渲染")])]),e._v(" "),t("h4",{attrs:{id:"什么是memoization-记忆化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是memoization-记忆化"}},[e._v("#")]),e._v(" 什么是memoization(记忆化)？")]),e._v(" "),t("p",[e._v("是个过程，允许缓存函数调用的值，这样下次调用就会直接返回值，不用再进行计算")]),e._v(" "),t("h4",{attrs:{id:"手写usememo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#手写usememo"}},[e._v("#")]),e._v(" 手写useMemo")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function useMemos(nextCreate, dependencies) {\n  if (hookStates[hookIndex]) {   // 说明不是第一次渲染\n    let [lastMemo, lastDependencies] = hookStates[hookIndex];\n    let same = dependencies.every((item, index) => item === lastDependencies[index]);\n    if (same) {\n      hookIndex++;\n      return lastMemo;\n    } else {\n        const newMemo = callBack()\n        hookState[hookIndex++] = [newMemo, dependencies]\n    }\n  } else {\n        const newMemo = callBack()\n        hookState[hookIndex++] = [newMemo, dependencies]\n  }\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br")])]),t("h4",{attrs:{id:"手写usecallback"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#手写usecallback"}},[e._v("#")]),e._v(" 手写useCallback")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("let hookStates: any = [];\nlet hookIndex: number = 0;\nfunction useCallbacks(callback: any, dependencies: any) {\n  if (hookStates[hookIndex]) {   // 说明不是第一次渲染\n    let [lastCallback, lastDependencies] = hookStates[hookIndex];\n    let same = dependencies.every((item: any, index: any) => item === lastDependencies[index]);\n    if (same) {\n        hookIndex++;\n        return lastCallback;\n        }\n    }\n    // 第一次渲染 或者 不是第一次但是依赖项相同，都返回新的\n    hookStates[hookIndex++] = [callback, dependencies];\n    return callback\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br")])]),t("h3",{attrs:{id:"_26-react如何区分类组件和函数组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_26-react如何区分类组件和函数组件"}},[e._v("#")]),e._v(" 26.react如何区分类组件和函数组件？")]),e._v(" "),t("p",[e._v("通过原型链判断是否有React.Component即可=》Component.prototype.isReactComponent")]),e._v(" "),t("h3",{attrs:{id:"_27-jsx原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_27-jsx原理"}},[e._v("#")]),e._v(" 27.jsx原理？")]),e._v(" "),t("p",[e._v("通过babel编译成js对象，然后通过render函数映射成dom节点插入页面=>浏览器不能直接读取jsx")]),e._v(" "),t("h4",{attrs:{id:"自定义组件名为什么要大写"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义组件名为什么要大写"}},[e._v("#")]),e._v(" 自定义组件名为什么要大写？")]),e._v(" "),t("p",[e._v("区分是组件还是html(dom)元素，大写是组件，小写是dom元素")]),e._v(" "),t("h4",{attrs:{id:"是否可以不使用jsx"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#是否可以不使用jsx"}},[e._v("#")]),e._v(" 是否可以不使用jsx？")]),e._v(" "),t("p",[e._v("可以，但是不使用jsx比如创建一个div就需要通过react.createElement来创建，比较麻烦")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 使用jsx\nclass Hello extends React.Component {\n  render() {\n    return <div>Hello {this.props.toWhat}</div>;\n  }\n}\n// 不使用jsx\nclass Hello extends React.Component {\n  render() {\n    return React.createElement('div', null, `Hello ${this.props.toWhat}`);\n  }\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br")])]),t("h3",{attrs:{id:"_28-props透传"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_28-props透传"}},[e._v("#")]),e._v(" 28.props透传？")]),e._v(" "),t("p",[e._v("高层级中的props传递到更深层级的组件就是props透传")]),e._v(" "),t("h3",{attrs:{id:"_29-空标签的作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_29-空标签的作用"}},[e._v("#")]),e._v(" 29.空标签的作用？")]),e._v(" "),t("ul",[t("li",[e._v("<>表示空标签，react.Fragment()可以用来将子列表分组，并且不在dom中增加额外节点")]),e._v(" "),t("li",[e._v("<></> 是 <React.Fragment/> 的语法糖。")]),e._v(" "),t("li",[e._v("空标签不能接受键值或属性，需要属性通过这种方式<React.Fragment key={item.id}/>")])]),e._v(" "),t("h3",{attrs:{id:"_30-属性和状态的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_30-属性和状态的区别"}},[e._v("#")]),e._v(" 30.属性和状态的区别？")]),e._v(" "),t("p",[e._v("属性是props，状态是state。都会触发render更新=》没有state的是无状态组件")]),e._v(" "),t("h4",{attrs:{id:"区别-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#区别-2"}},[e._v("#")]),e._v(" 区别")]),e._v(" "),t("ul",[t("li",[e._v("属性可以从父组件获取和修改，状态不能")]),e._v(" "),t("li",[e._v("属性可以修改子组件值，状态不可以\n=》状态只能被组件自身修改不能被外部访问和修改，属性是外部传进来的参数，内部无法修改，只能由外部来修改")])]),e._v(" "),t("h3",{attrs:{id:"_31-插槽"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_31-插槽"}},[e._v("#")]),e._v(" 31.插槽？")]),e._v(" "),t("p",[e._v("在定义的插槽内部通过this.props.children获取要填充的内容")]),e._v(" "),t("h3",{attrs:{id:"_32-声明式导航和编程式导航区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_32-声明式导航和编程式导航区别"}},[e._v("#")]),e._v(" 32.声明式导航和编程式导航区别？")]),e._v(" "),t("ul",[t("li",[e._v("声明式导航："),t("a",{attrs:{href:"/index.html"}},[e._v("aaa")]),e._v(" =>"),t("NavLink",{attrs:{to:"/index.html"}})],1),e._v(" "),t("li",[e._v("编程式:location.href = \"/index.html\"=>this.props.history.push('index.html')")]),e._v(" "),t("li",[e._v("动态路由/a/:id =>然后通过props.match.params.id可以获取到id")]),e._v(" "),t("li",[e._v("路由传参：this.props.history.push({pathname:'/user',query: {a: 1}}) =>this.props.location.query.a获取")]),e._v(" "),t("li",[e._v("browserRouter路径没有#，会真正向后端发送请求要页面，没有就404。另一种hashRouter带有#")]),e._v(" "),t("li",[e._v("withRouter可以把组件包起来，传递history，match，location这些属性=》高阶组件HOC")])]),e._v(" "),t("h3",{attrs:{id:"_33-反向代理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_33-反向代理"}},[e._v("#")]),e._v(" 33.反向代理？")]),e._v(" "),t("p",[e._v("httpProxyMiddleware可以进行代理，使用接近webpack的devServer=》利用后端之间无跨域来实现")]),e._v(" "),t("h3",{attrs:{id:"_34-说说对cssmodule"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_34-说说对cssmodule"}},[e._v("#")]),e._v(" 34.说说对cssModule？")]),e._v(" "),t("ul",[t("li",[e._v("可以将css模块化，通过修改css文件名称，如tab.module.css即可=》生成的样式名会自动拼接随机串防止重复")]),e._v(" "),t("li",[e._v(":global(.active样式名)即可实现全局样式定义，即使在module文件中也全局生效")])]),e._v(" "),t("h3",{attrs:{id:"_35-immutable作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_35-immutable作用"}},[e._v("#")]),e._v(" 35.immutable作用？")]),e._v(" "),t("ul",[t("li",[e._v("深拷贝=》新对象上操作不会影响到原对象的数据，每次修改一个immutable对象都会创建一个新的不可变对象")]),e._v(" "),t("li",[e._v("转普通js对象=》immuObj.toJS()")]),e._v(" "),t("li",[e._v("fromJS()会自动转成immutable对象")])]),e._v(" "),t("h4",{attrs:{id:"常用api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用api"}},[e._v("#")]),e._v(" 常用api")]),e._v(" "),t("p",[e._v("set(),setIn(),get(),updateIn()")]),e._v(" "),t("h4",{attrs:{id:"immber和immutable区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#immber和immutable区别"}},[e._v("#")]),e._v(" immber和immutable区别？")]),e._v(" "),t("ul",[t("li",[e._v("immutable返回的是包装的数据")]),e._v(" "),t("li",[e._v("immer是原生数据")])]),e._v(" "),t("h4",{attrs:{id:"结合redux"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#结合redux"}},[e._v("#")]),e._v(" 结合redux")]),e._v(" "),t("p",[e._v("immutable-redux")]),e._v(" "),t("h3",{attrs:{id:"_36-mobx和redux区别-都是react状态管理工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_36-mobx和redux区别-都是react状态管理工具"}},[e._v("#")]),e._v(" 36.mobx和redux区别(都是react状态管理工具)？")]),e._v(" "),t("ul",[t("li",[e._v("mobx可以直接修改数据，不用返回一个新数据")]),e._v(" "),t("li",[e._v("mobx没有限制只能一个store，可以有多个")]),e._v(" "),t("li",[e._v("redux默认以对象形式存储数据，mobx可以使用可观察对象")])]),e._v(" "),t("h4",{attrs:{id:"核心"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#核心"}},[e._v("#")]),e._v(" 核心")]),e._v(" "),t("ul",[t("li",[e._v("mobx通过observable可以精准更新")]),e._v(" "),t("li",[e._v("redux通过dispatch进行广播，然后provide和connect来对比前后差异控制更新")])]),e._v(" "),t("h4",{attrs:{id:"使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[e._v("#")]),e._v(" 使用")]),e._v(" "),t("p",[e._v("let a = observable({name: 111}) => a.name = '222' 可以直接修改\n=》通过autorun(()=>{})可以监听到改变\n=》runInAction(()=>{})")]),e._v(" "),t("h4",{attrs:{id:"mobx-react"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mobx-react"}},[e._v("#")]),e._v(" mobx-react")]),e._v(" "),t("p",[e._v('在render的时候provide()，具体组件@inject("store"),@observer=>会在this.props获取到store')]),e._v(" "),t("h4",{attrs:{id:"redux有哪些异步中间件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redux有哪些异步中间件"}},[e._v("#")]),e._v(" redux有哪些异步中间件")]),e._v(" "),t("p",[e._v("redux-sage 借助generator来处理异步，避免回调")]),e._v(" "),t("h3",{attrs:{id:"_37-了解过style-components吗-将html标签包装成组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_37-了解过style-components吗-将html标签包装成组件"}},[e._v("#")]),e._v(" 37.了解过style-components吗？(将html标签包装成组件)")]),e._v(" "),t("ul",[t("li",[e._v("声明const stFooter(标签名) = styled.footer"),t("code",[e._v("background: yellow")])]),e._v(" "),t("li",[e._v("使用"),t("stFooter",[t("a",[e._v("123")])])],1),e._v(" "),t("li",[e._v("高阶组件，通过props把参数传给子组件，子组件className={props.className}接收")])]),e._v(" "),t("h3",{attrs:{id:"_38-createportal作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_38-createportal作用"}},[e._v("#")]),e._v(" 38.createPortal作用？")]),e._v(" "),t("p",[e._v("是用来在父组件外创建dom节点的方法=》ReactDom.createPortal(child,container)")]),e._v(" "),t("h3",{attrs:{id:"_39-react的lazy和suspense作用-路由懒加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_39-react的lazy和suspense作用-路由懒加载"}},[e._v("#")]),e._v(" 39.react的lazy和suspense作用？(路由懒加载)")]),e._v(" "),t("p",[e._v("懒加载(按需加载)=》webpack解析时会自动进行代码切割(code splitting)，使用的时候才会被加载(异步)")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('const LazyLoad = (path) => {\n    const Comp = React.lazy(() => import(\'../views/${path}\'))\n    // 通过Suspense来包裹\n    return (\n        <React.Suspense fallback={<>加载中...</>}>\n            <Comp/>\n        </React.Suspense>\n    )\n}\n<Route path="/films" element={LazyLoad("film")}>\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br")])]),t("h3",{attrs:{id:"_40-forwardref用过吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_40-forwardref用过吗"}},[e._v("#")]),e._v(" 40.forwardRef用过吗？")]),e._v(" "),t("p",[e._v("用来向子组件传递ref")]),e._v(" "),t("h3",{attrs:{id:"_41-dva"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_41-dva"}},[e._v("#")]),e._v(" 41.dva")]),e._v(" "),t("p",[e._v("dva = React-Router + Redux + Redux-saga")]),e._v(" "),t("h3",{attrs:{id:"_42-umi-乌米"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_42-umi-乌米"}},[e._v("#")]),e._v(" 42.umi(乌米)")]),e._v(" "),t("p",[e._v("在umirc.ts中可以配置路由是否hash通过history，可以配置代理proxy")]),e._v(" "),t("h4",{attrs:{id:"react-router-6更新"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react-router-6更新"}},[e._v("#")]),e._v(" react-router@6更新")]),e._v(" "),t("ul",[t("li",[e._v("用element代替component")]),e._v(" "),t("li",[e._v("Routes代替Switch")]),e._v(" "),t("li",[e._v("useNavigate代替useHistory")]),e._v(" "),t("li",[e._v("通过navigate或redirect组件替代路由重定向")])]),e._v(" "),t("h4",{attrs:{id:"自定义redirect组件进行重定向-》官方推荐"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义redirect组件进行重定向-》官方推荐"}},[e._v("#")]),e._v(" 自定义redirect组件进行重定向=》官方推荐")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<Route path="*" element={<Redirect to="/file"/>}/>\nfunction Redirect({to}) {\n    const navigate = useNavigate()\n    useEffect(() => {\n        navigate(to,{replace: true})\n    })\n    return null\n}\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])]),t("h4",{attrs:{id:"api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[e._v("#")]),e._v(" api")]),e._v(" "),t("ul",[t("li",[e._v("useNavigate()")]),e._v(" "),t("li",[e._v("useParams()")]),e._v(" "),t("li",[e._v("useLocation()")]),e._v(" "),t("li",[e._v("useSearchParams()")]),e._v(" "),t("li",[e._v("useRoutes()")])]),e._v(" "),t("h4",{attrs:{id:"this-props的三个参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#this-props的三个参数"}},[e._v("#")]),e._v(" this.props的三个参数")]),e._v(" "),t("ul",[t("li",[e._v("push=>useNavigate()")]),e._v(" "),t("li",[e._v("match=>useParams()")]),e._v(" "),t("li",[e._v("location=>useLocation()")])]),e._v(" "),t("h4",{attrs:{id:"自己封装withrouter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自己封装withrouter"}},[e._v("#")]),e._v(" 自己封装withRouter")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("export default function withRouter(Component) {\n    return function(props) {\n        const push = useNavigate()\n        const match = useParams()\n        const location = useLocation()\n        return <Component {...props} history={{push,match,location}}\n    }\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br")])]),t("h3",{attrs:{id:"_43-hooks实现一个计数器组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_43-hooks实现一个计数器组件"}},[e._v("#")]),e._v(" 43.hooks实现一个计数器组件？")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function App() {\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCount((count) => count + 1);\n    }, 1000);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  return <h1>{count}</h1>;\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br")])]),t("h3",{attrs:{id:"_44-createelement和cloneelement区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_44-createelement和cloneelement区别"}},[e._v("#")]),e._v(" 44.createElement和cloneElement区别？")]),e._v(" "),t("ul",[t("li",[e._v("cloneElement根据element生成新的element=》element是一个react元素=》是不可变对象，只能访问不能修改(可以先拷贝再修改)")]),e._v(" "),t("li",[e._v("createElement根据type生成新的element=》type即html标签或react组件")])]),e._v(" "),t("h3",{attrs:{id:"_45-usestate和setstate区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_45-usestate和setstate区别"}},[e._v("#")]),e._v(" 45.useState和setState区别？")]),e._v(" "),t("ul",[t("li",[e._v("useState只能要在函数组件,setState只能用在类组件")]),e._v(" "),t("li",[e._v("useState修改state时，同一个useState声明的值会覆盖，而setState修改state，多次setState的对象会被合并处理=》多个useState声明的值会触发多次渲染\n(useState修改state时，设置相同值不会重新渲染，而类组件即使setState相同的值也会重新渲染)")])]),e._v(" "),t("h4",{attrs:{id:"直接修改state会有什么影响"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#直接修改state会有什么影响"}},[e._v("#")]),e._v(" 直接修改state会有什么影响？")]),e._v(" "),t("p",[e._v("状态发生了变化，但不会重新渲染，必须通过setState去更改才会重新渲染")]),e._v(" "),t("h3",{attrs:{id:"_46-使用hooks有什么常见的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_46-使用hooks有什么常见的问题"}},[e._v("#")]),e._v(" 46.使用hooks有什么常见的问题？")]),e._v(" "),t("p",[e._v("useState的时候，不能使用类似push,pop等来直接修改，否则数组无法获取到新值，要通过析构的方式")]),e._v(" "),t("h3",{attrs:{id:"_47-hoc-higher-order-component"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_47-hoc-higher-order-component"}},[e._v("#")]),e._v(" 47.HOC(Higher Order Component)")]),e._v(" "),t("ul",[t("li",[e._v("是一种基于react组合特性的设计模式")]),e._v(" "),t("li",[e._v("用来实现逻辑复用（也可以用来把类组件转成函数组件），增删改props，渲染劫持(控制是否渲染，可以判断当数据加载完成后再去渲染内容->条件渲染-懒加载，权限控制，节流渲染-useMemo来减少渲染次数)")]),e._v(" "),t("li",[e._v("高阶组件是参数为组件，返回值为新组件的函数=》核心思想要是纯函数，没有副作用")]),e._v(" "),t("li",[e._v("HOC不会修改传入的组件，是通过将组件包装在容器组件中来组成新的组件")])]),e._v(" "),t("h4",{attrs:{id:"应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用"}},[e._v("#")]),e._v(" 应用")]),e._v(" "),t("ul",[t("li",[e._v("利用条件渲染来做权限控制")]),e._v(" "),t("li",[e._v("组件复用")])]),e._v(" "),t("h4",{attrs:{id:"优缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优缺点"}},[e._v("#")]),e._v(" 优缺点")]),e._v(" "),t("p",[e._v("优点不会影响组件内部状态，缺点是大量使用HOC会产生很多嵌套，不好维护")]),e._v(" "),t("h4",{attrs:{id:"组合-通过connect"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组合-通过connect"}},[e._v("#")]),e._v(" 组合 通过connect")]),e._v(" "),t("p",[e._v("connect是一个返回高阶组件的高阶函数=》输入类型和输出类型相同的函数很容易组合在一起")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 不推荐如下写法...\nconst EnhancedComponent = withRouter(connect(commentSelector)(WrappedComponent))\n\n// ... 建议编写组合工具函数\n// compose(f, g, h) 等同于 (...args) => f(g(h(...args)))\nconst enhance = compose(\n  // 这些都是单参数的 HOC\n  withRouter,\n  connect(commentSelector)\n)\nconst EnhancedComponent = enhance(WrappedComponent)\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br")])]),t("h4",{attrs:{id:"缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[e._v("#")]),e._v(" 缺点")]),e._v(" "),t("p",[e._v("无法直接通过this.refs.component获取被HOC封装的组件=》可以通过父组件传递一个方法来获取")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('class ParentCompoent extends React.Component {\n  getInstance = (ref)=>{\n    this.wrappedInstance = ref;\n  }\n\n  render(){\n    return <MyComponent getInstance={this.getInstance} />\n  }\n}\nfunction HOCFactory(wrappedComponent) {\n  return class HOC extends React.Component {\n    render(){\n      let props = {\n        ...this.props\n      };\n\n      if(typeof this.props.getInstance === "function") {\n        props.ref = this.props.getInstance;\n      }\n\n      return <wrappedComponent {...props} />\n    }\n  }\n}\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br"),t("span",{staticClass:"line-number"},[e._v("14")]),t("br"),t("span",{staticClass:"line-number"},[e._v("15")]),t("br"),t("span",{staticClass:"line-number"},[e._v("16")]),t("br"),t("span",{staticClass:"line-number"},[e._v("17")]),t("br"),t("span",{staticClass:"line-number"},[e._v("18")]),t("br"),t("span",{staticClass:"line-number"},[e._v("19")]),t("br"),t("span",{staticClass:"line-number"},[e._v("20")]),t("br"),t("span",{staticClass:"line-number"},[e._v("21")]),t("br"),t("span",{staticClass:"line-number"},[e._v("22")]),t("br"),t("span",{staticClass:"line-number"},[e._v("23")]),t("br"),t("span",{staticClass:"line-number"},[e._v("24")]),t("br")])]),t("h3",{attrs:{id:"_48-jsx和fiber有什么关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_48-jsx和fiber有什么关系"}},[e._v("#")]),e._v(" 48.jsx和Fiber有什么关系？")]),e._v(" "),t("ul",[t("li",[e._v("mount阶段通过jsx对象（调用createElement的结果）调用createFiberFromElement生成Fiber")]),e._v(" "),t("li",[e._v("update时通过reconcileChildFibers或reconcileChildrenArray对比新jsx和老的Fiber（current Fiber）生成新的wip Fiber树")])]),e._v(" "),t("h3",{attrs:{id:"_49-react17之前jsx文件为什么要声明import-react-from-react-之后为什么不需要了"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_49-react17之前jsx文件为什么要声明import-react-from-react-之后为什么不需要了"}},[e._v("#")]),e._v(" 49.react17之前jsx文件为什么要声明import React from 'react'，之后为什么不需要了？")]),e._v(" "),t("p",[e._v("jsx经过编译之后编程React.createElement，不引入React就会报错，react17改变了编译方式，变成了jsx.createElement")]),e._v(" "),t("h3",{attrs:{id:"_50-react中怎么使用async-await"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_50-react中怎么使用async-await"}},[e._v("#")]),e._v(" 50.react中怎么使用async/await？")]),e._v(" "),t("ul",[t("li",[e._v("在官方脚手架搭建的项目可以直接使用")]),e._v(" "),t("li",[e._v("自己的项目需要引入babel，在babel中进行配置=>利用babel的transform-async-to-module-method来转成浏览器支持的语法")])]),e._v(" "),t("h3",{attrs:{id:"_51-为什么hooks不能写在条件判断中"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_51-为什么hooks不能写在条件判断中"}},[e._v("#")]),e._v(" 51.为什么hooks不能写在条件判断中？")]),e._v(" "),t("p",[e._v("hook会按顺序存储在链表中，如果写在条件判断中，就没法保持链表的顺序")]),e._v(" "),t("h3",{attrs:{id:"_52-render作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_52-render作用"}},[e._v("#")]),e._v(" 52.render作用？")]),e._v(" "),t("p",[e._v("必须返回值，无论是否为空")]),e._v(" "),t("h3",{attrs:{id:"_53-react怎么区分class组件和function组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_53-react怎么区分class组件和function组件"}},[e._v("#")]),e._v(" 53.react怎么区分Class组件和Function组件？")]),e._v(" "),t("p",[e._v("Class组件prototype上有isReactComponent属性")]),e._v(" "),t("h3",{attrs:{id:"_54-请说一下react的渲染过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_54-请说一下react的渲染过程"}},[e._v("#")]),e._v(" 54.请说一下react的渲染过程？")]),e._v(" "),t("ul",[t("li",[e._v("性能瓶颈：cpu io fiber时间片 concurrent mode")]),e._v(" "),t("li",[e._v("渲染过程：scheduler render commit Fiber架构")])]),e._v(" "),t("h3",{attrs:{id:"_55-react有哪些优化手段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_55-react有哪些优化手段"}},[e._v("#")]),e._v(" 55.react有哪些优化手段？")]),e._v(" "),t("p",[e._v("shouldComponentUpdate、不可变数据结构、列表key、pureComponent、react.memo、useEffect依赖项、useCallback、useMemo")]),e._v(" "),t("h3",{attrs:{id:"_56-我们写的事件是绑定在dom上么-如果不是绑定在哪里"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_56-我们写的事件是绑定在dom上么-如果不是绑定在哪里"}},[e._v("#")]),e._v(" 56.我们写的事件是绑定在dom上么，如果不是绑定在哪里？")]),e._v(" "),t("p",[e._v("v16绑定在document上，v17绑定在container上")]),e._v(" "),t("h3",{attrs:{id:"_57-为什么我们的事件手动绑定this"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_57-为什么我们的事件手动绑定this"}},[e._v("#")]),e._v(" 57.为什么我们的事件手动绑定this？")]),e._v(" "),t("p",[e._v("合成事件监听函数在执行的时候会丢失上下文，拿到的this就是undefined，需要手动绑定this或者使用箭头函数")]),e._v(" "),t("h4",{attrs:{id:"箭头函数作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数作用"}},[e._v("#")]),e._v(" 箭头函数作用")]),e._v(" "),t("p",[e._v("用来绑定组件的上下文")]),e._v(" "),t("h3",{attrs:{id:"_58-为什么不能用-return-false-来阻止事件的默认行为"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_58-为什么不能用-return-false-来阻止事件的默认行为"}},[e._v("#")]),e._v(" 58.为什么不能用 return false 来阻止事件的默认行为？")]),e._v(" "),t("p",[e._v("合成事件和原生事件触发时机不一样")]),e._v(" "),t("h3",{attrs:{id:"_59-react怎么通过dom元素-找到与之对应的-fiber对象的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_59-react怎么通过dom元素-找到与之对应的-fiber对象的"}},[e._v("#")]),e._v(" 59.react怎么通过dom元素，找到与之对应的 fiber对象的？")]),e._v(" "),t("p",[e._v("通过internalInstanceKey对应")]),e._v(" "),t("h3",{attrs:{id:"_60-react-hooks比较比的是值还是内存地址"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_60-react-hooks比较比的是值还是内存地址"}},[e._v("#")]),e._v(" 60.react Hooks比较比的是值还是内存地址？")]),e._v(" "),t("p",[e._v("比的是内存地址")]),e._v(" "),t("h3",{attrs:{id:"_61-手写防抖节流hook-》不使用usecallback-因为会把处理函数一起缓存起来-这样比如搜索用防抖节流-搜素值变化由于函数被缓存-就无法实时搜索"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_61-手写防抖节流hook-》不使用usecallback-因为会把处理函数一起缓存起来-这样比如搜索用防抖节流-搜素值变化由于函数被缓存-就无法实时搜索"}},[e._v("#")]),e._v(" 61.手写防抖节流hook=》不使用useCallback，因为会把处理函数一起缓存起来，这样比如搜索用防抖节流，搜素值变化由于函数被缓存，就无法实时搜索")]),e._v(" "),t("ul",[t("li",[e._v("直接使用防抖函数，这样搜索的时候，就可以每隔几秒才进行搜索")]),e._v(" "),t("li",[e._v("如果是固定的值可以使用useCallback缓存")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function useDebounce(fn, wait) { // 自研最优防抖\n    let timer = useRef()\n    return () => {\n        if (timer.current) {\n            clearTimeout(timer.current)\n        }\n        timer.current = setTimeout(() => {\n            fn.apply(this, arguments)\n        }, wait)\n    }\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br")])]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function useDebounce(fn, wait) { // 自研最优节流\n    let timer = useRef();\n    return () =>{\n        if (!timer.current) {\n            timer.current = setTimeout(() => {\n                timer.current = null\n                fn.apply(this, arguments)\n            }, wait)\n        }\n    }\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br")])]),t("h3",{attrs:{id:"_62-如何理解不可变值-性-数据-immutable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_62-如何理解不可变值-性-数据-immutable"}},[e._v("#")]),e._v(" 62.如何理解不可变值｜性｜数据(immutable)？")]),e._v(" "),t("p",[e._v("不可变数据是函数式编程的一个特性，意思是一旦创建就不能被修改的数据\n=》对immutable对象任意修改操作都会返回一个新的immutable对象")]),e._v(" "),t("h4",{attrs:{id:"使用immutable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用immutable"}},[e._v("#")]),e._v(" 使用immutable")]),e._v(" "),t("p",[e._v("通过immutable.fromJS把js对象转成immutable对象\nsetIn赋值，getIn取值")]),e._v(" "),t("h4",{attrs:{id:"应用-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#应用-2"}},[e._v("#")]),e._v(" 应用")]),e._v(" "),t("p",[e._v("setState和redux")]),e._v(" "),t("h4",{attrs:{id:"好处"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#好处"}},[e._v("#")]),e._v(" 好处")]),e._v(" "),t("ul",[t("li",[e._v("使得复杂的特性更容易实现")]),e._v(" "),t("li",[e._v("比较容易跟踪到数据改变")]),e._v(" "),t("li",[e._v("确定react何时渲染=>pureComponent")])]),e._v(" "),t("h3",{attrs:{id:"_63-如何在react中创建组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_63-如何在react中创建组件"}},[e._v("#")]),e._v(" 63.如何在react中创建组件？")]),e._v(" "),t("p",[e._v("函数式组件")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function Greeting({ message }) {\n  return <h1>{`Hello, ${message}`}</h1>\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br")])]),t("p",[e._v("类组件=>在函数内部对累组件处理需要通过new来实例化")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("class Greeting extends React.Component {\n  render() {\n    return <h1>{`Hello, ${this.props.message}`}</h1>\n  }\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("h3",{attrs:{id:"_64-状态提升"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_64-状态提升"}},[e._v("#")]),e._v(" 64.状态提升？")]),e._v(" "),t("p",[e._v("多组件共享数据，要将数据提升到共同的祖先组件上，而不是在两个子组件中各自维护局部的状态")]),e._v(" "),t("h3",{attrs:{id:"_65-react中为什么使用classname而不是class"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_65-react中为什么使用classname而不是class"}},[e._v("#")]),e._v(" 65.react中为什么使用className而不是class？")]),e._v(" "),t("p",[e._v("class是js的关键字，而jsx是基于js的")]),e._v(" "),t("h3",{attrs:{id:"_66-react的super和super-props-区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_66-react的super和super-props-区别"}},[e._v("#")]),e._v(" 66.react的super和super(props)区别？")]),e._v(" "),t("p",[e._v("在构造函数内直接使用super拿不到props，必须使用super(props)将props传递给super方法\n=》在构造函数之外，通过this.props都可以拿到")]),e._v(" "),t("h3",{attrs:{id:"_67-如何编写mapdispatchtoprops"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_67-如何编写mapdispatchtoprops"}},[e._v("#")]),e._v(" 67.如何编写mapDispatchToProps()？")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const mapDispatchToProps = (dispatch) => ({\n action: () => dispatch(action())\n})\n// 简写\nconst mapDispatchToProps = { action }\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("h3",{attrs:{id:"_68-react事件绑定原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_68-react事件绑定原理"}},[e._v("#")]),e._v(" 68.react事件绑定原理？")]),e._v(" "),t("ul",[t("li",[e._v("事件绑定不是绑定在该div真实dom上，而是在document处监听所有的事件")]),e._v(" "),t("li",[e._v("当事件发生并冒泡到document，会将事件内容交由真正的处理函数去执行.")])]),e._v(" "),t("h4",{attrs:{id:"好处-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#好处-2"}},[e._v("#")]),e._v(" 好处")]),e._v(" "),t("p",[e._v("减少内存损耗，在组件挂载和销毁时能统一绑定和移除事件")]),e._v(" "),t("h4",{attrs:{id:"取消事件冒泡"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#取消事件冒泡"}},[e._v("#")]),e._v(" 取消事件冒泡")]),e._v(" "),t("p",[e._v("不能通过event.stopPropagation，要调用event.preventDefault")])])}),[],!1,null,null,null);t.default=r.exports}}]);