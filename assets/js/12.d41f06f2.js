(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{284:function(t,a,s){"use strict";s.r(a);var n=s(14),o=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#mongodb"}},[t._v("MongoDB")]),a("ul",[a("li",[a("a",{attrs:{href:"#_1-mq如何保证消息不丢失"}},[t._v("1.mq如何保证消息不丢失")])])])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"mongodb"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mongodb"}},[t._v("#")]),t._v(" MongoDB")]),t._v(" "),a("h3",{attrs:{id:"_1-mq如何保证消息不丢失"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-mq如何保证消息不丢失"}},[t._v("#")]),t._v(" 1.mq如何保证消息不丢失")]),t._v(" "),a("p",[t._v("将消息进行持久化，有同步刷盘(失败可以走补偿机制，缺点是会有延迟)和异步刷盘\n消息确认机制\n可以在发送消息之前记录日志，如果异常失败后期可以通过日志做补偿\n(rabbitmq消息发送成功后会清除，kafka不会清除，是通过定时日志清除策略来清除)")])])}),[],!1,null,null,null);a.default=o.exports}}]);