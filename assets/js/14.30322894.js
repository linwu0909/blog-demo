(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{285:function(s,t,a){"use strict";a.r(t);var r=a(14),e=Object(r.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#typescript"}},[s._v("TypeScript")]),t("ul",[t("li",[t("a",{attrs:{href:"#_1-什么是ts"}},[s._v("1.什么是ts?")])]),t("li",[t("a",{attrs:{href:"#_2-为什么使用ts"}},[s._v("2.为什么使用ts?")])]),t("li",[t("a",{attrs:{href:"#_3-什么是泛型"}},[s._v("3.什么是泛型？")])]),t("li",[t("a",{attrs:{href:"#_4-什么是构造函数"}},[s._v("4.什么是构造函数")])]),t("li",[t("a",{attrs:{href:"#_5-重写是什么"}},[s._v("5.重写是什么？")])]),t("li",[t("a",{attrs:{href:"#_6-never和void区别"}},[s._v("6.never和void区别")])]),t("li",[t("a",{attrs:{href:"#_7-类型和接口的区别"}},[s._v("7.类型和接口的区别")])]),t("li",[t("a",{attrs:{href:"#_8-联合类型"}},[s._v("8.联合类型")])]),t("li",[t("a",{attrs:{href:"#_9-断言-as-foo-用来去覆盖原有的推断"}},[s._v("9.断言 as Foo 用来去覆盖原有的推断")])]),t("li",[t("a",{attrs:{href:"#_10-字面量"}},[s._v("10.字面量")])])])])])]),t("p"),s._v(" "),t("h2",{attrs:{id:"typescript"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#typescript"}},[s._v("#")]),s._v(" TypeScript")]),s._v(" "),t("h3",{attrs:{id:"_1-什么是ts"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是ts"}},[s._v("#")]),s._v(" 1.什么是ts?")]),s._v(" "),t("p",[s._v("ts是js的超集，扩展了js的语法，最终都会编译成js")]),s._v(" "),t("h3",{attrs:{id:"_2-为什么使用ts"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-为什么使用ts"}},[s._v("#")]),s._v(" 2.为什么使用ts?")]),s._v(" "),t("p",[s._v("ts在开发时就能给出编译错误，js要在运行时才能给出错误")]),s._v(" "),t("h3",{attrs:{id:"_3-什么是泛型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-什么是泛型"}},[s._v("#")]),s._v(" 3.什么是泛型？")]),s._v(" "),t("p",[s._v("泛型指定义函数，接口或类的时候，不预先指定具体的类型，使用时再去指定类型")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("function createArray<T>(length: number, value: T): Array<T> {\nlet result: T[] = [];\nfor (let i = 0; i < length; i++) {\nresult[i] = value;\n}\nreturn result;\n}\n// 使用的时候再指定类型\nlet result = createArray<string>(3, 'x');\n// 也可以不指定类型，TS 会自动类型推导\nlet result2 = createArray(3, 'x');\nconsole.log(result);\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("h3",{attrs:{id:"_4-什么是构造函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-什么是构造函数"}},[s._v("#")]),s._v(" 4.什么是构造函数")]),s._v(" "),t("p",[s._v("主要用来创建对象时初始化对象。可以通过this来访问当前类中的属性和方法")]),s._v(" "),t("h3",{attrs:{id:"_5-重写是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-重写是什么"}},[s._v("#")]),s._v(" 5.重写是什么？")]),s._v(" "),t("p",[s._v("子类可以根据需要重写父类的方法")]),s._v(" "),t("h3",{attrs:{id:"_6-never和void区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-never和void区别"}},[s._v("#")]),s._v(" 6.never和void区别")]),s._v(" "),t("p",[s._v("never是所有类型的子类型，表示永远不存在的值\nvoid表示没有任何类型，可以被赋值为null和undefined")]),s._v(" "),t("h3",{attrs:{id:"_7-类型和接口的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-类型和接口的区别"}},[s._v("#")]),s._v(" 7.类型和接口的区别")]),s._v(" "),t("p",[s._v("类型可以声明任何类型(包含基本类型，联合类型和交叉类型)，接口只能定义对象类型\n接口可以扩展和实现，类型不可以")]),s._v(" "),t("h3",{attrs:{id:"_8-联合类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-联合类型"}},[s._v("#")]),s._v(" 8.联合类型")]),s._v(" "),t("p",[s._v("string|number")]),s._v(" "),t("h3",{attrs:{id:"_9-断言-as-foo-用来去覆盖原有的推断"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-断言-as-foo-用来去覆盖原有的推断"}},[s._v("#")]),s._v(" 9.断言 as Foo 用来去覆盖原有的推断")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("interface Foo {\n  bar: number;\n  bas: string;\n}\n\nconst foo = {} as Foo; 去覆盖原有的推断\nfoo.bar = 123;\nfoo.bas = 'hello';\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h4",{attrs:{id:"类型断言和类型转换区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型断言和类型转换区别"}},[s._v("#")]),s._v(" 类型断言和类型转换区别")]),s._v(" "),t("p",[s._v("类型断言只在编译期使用，而转换一般意味着是在运行时")]),s._v(" "),t("h3",{attrs:{id:"_10-字面量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-字面量"}},[s._v("#")]),s._v(" 10.字面量")]),s._v(" "),t("p",[s._v("提供了string，number，boolean的字面量类型\n字符串字面量: type direction = 'North' | 'East' | 'South' | 'West';\nnumber字面量: type num = 1 | 2 | 3\nboolean字面量: type bool = true | false")])])}),[],!1,null,null,null);t.default=e.exports}}]);