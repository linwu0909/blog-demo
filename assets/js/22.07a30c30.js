(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{294:function(t,a,_){"use strict";_.r(a);var e=_(14),s=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#http"}},[t._v("HTTP")]),a("ul",[a("li",[a("a",{attrs:{href:"#_1-http和https的区别"}},[t._v("1.http和https的区别？")])]),a("li",[a("a",{attrs:{href:"#_2-https如何用ssl协议加密"}},[t._v("2.https如何用ssl协议加密？")])]),a("li",[a("a",{attrs:{href:"#_3-常见状态码"}},[t._v("3.常见状态码？")])]),a("li",[a("a",{attrs:{href:"#_4-get和post区别"}},[t._v("4.get和post区别？")])]),a("li",[a("a",{attrs:{href:"#_5-get和post请求在缓存上的区别"}},[t._v("5.get和post请求在缓存上的区别？")])]),a("li",[a("a",{attrs:{href:"#_6-tcp三次握手-建立连接-与四次挥手-断开连接"}},[t._v("6.tcp三次握手(建立连接)与四次挥手(断开连接)？")])]),a("li",[a("a",{attrs:{href:"#seq作用"}},[t._v("*seq作用？")])]),a("li",[a("a",{attrs:{href:"#_7-tcp和udp区别"}},[t._v("7.TCP和UDP区别？")])]),a("li",[a("a",{attrs:{href:"#_8-ajax是什么-有什么优缺点"}},[t._v("8.ajax是什么，有什么优缺点？")])]),a("li",[a("a",{attrs:{href:"#_9-网络层有什么协议-udp在哪一层-各个层次的代表设备"}},[t._v("9.网络层有什么协议？udp在哪一层，各个层次的代表设备？")])]),a("li",[a("a",{attrs:{href:"#_10-跨域-》非简单请求-复杂请求"}},[t._v("10.跨域=》非简单请求(复杂请求)？")])]),a("li",[a("a",{attrs:{href:"#_11-todo"}},[t._v("11.//TODO")])]),a("li",[a("a",{attrs:{href:"#_12-301-302状态码"}},[t._v("12.301，302状态码？")])]),a("li",[a("a",{attrs:{href:"#_14-http1-0-1-1-2-0-3-0区别"}},[t._v("14.HTTP1.0/1.1/2.0/3.0区别？")])]),a("li",[a("a",{attrs:{href:"#_15-http常用请求头"}},[t._v("15.http常用请求头？")])]),a("li",[a("a",{attrs:{href:"#_16-http常用响应头"}},[t._v("16.http常用响应头？")])]),a("li",[a("a",{attrs:{href:"#_17-ajax解决浏览器缓存问题"}},[t._v("17.ajax解决浏览器缓存问题？")])]),a("li",[a("a",{attrs:{href:"#_18-fetch和axios区别"}},[t._v("18.fetch和axios区别？")])])])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"http"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" HTTP")]),t._v(" "),a("h3",{attrs:{id:"_1-http和https的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-http和https的区别"}},[t._v("#")]),t._v(" 1.http和https的区别？")]),t._v(" "),a("ul",[a("li",[t._v("http传输的是明文数据，https传输的是加密后的数据")]),t._v(" "),a("li",[t._v("http端口是80，https端口是443")]),t._v(" "),a("li",[t._v("https是基于SSL加密的http协议")])]),t._v(" "),a("h3",{attrs:{id:"_2-https如何用ssl协议加密"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-https如何用ssl协议加密"}},[t._v("#")]),t._v(" 2.https如何用ssl协议加密？")]),t._v(" "),a("ul",[a("li",[t._v("https是http+ssl；https采用的是对称加密和非对称加密结合的方式。证书验证用非对称加密，信息传输用对称加密。")])]),t._v(" "),a("p",[t._v("ssl加密流程：")]),t._v(" "),a("ol",[a("li",[t._v("客户端发起请求，服务端返回证书给客户端，证书里有公钥")]),t._v(" "),a("li",[t._v("客户端通过公钥对加密数据的密钥进行非对称加密")]),t._v(" "),a("li",[t._v("服务端通过私钥，解密获得密钥，后续数据传输都用这个密钥对数据进行对称加密。")])]),t._v(" "),a("p",[t._v("如何解决非对称加密效率低和保证发送公钥的就是正确的人？可以通过CA证书")]),t._v(" "),a("h3",{attrs:{id:"_3-常见状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-常见状态码"}},[t._v("#")]),t._v(" 3.常见状态码？")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("200 OK 请求成功")])]),t._v(" "),a("li",[a("p",[t._v("201 Created 成功请求并创建新的资源")])]),t._v(" "),a("li",[a("p",[t._v("204 No Content 成功但服务器无返回")])]),t._v(" "),a("li",[a("p",[t._v("206 Partial Content 服务器成功处理了部分请求 =》断点续传")])]),t._v(" "),a("li",[a("p",[t._v("301 Moved Permanently永久移动 域名跳转 =》会缓存，新旧域名更替")])]),t._v(" "),a("li",[a("p",[t._v("302 Found 临时移动 未登录用户重定向到登陆页 =》没有缓存")])]),t._v(" "),a("li",[a("p",[t._v("304 Not Modified 未修改 此时服务器不会返回任何请求资源。客户端通常会缓存访问过的资源。=》协商缓存")])]),t._v(" "),a("li",[a("p",[t._v("307 Temporary Redirect 临时重定向 重定向时不会改变method(301和302都会把method改成get)")])]),t._v(" "),a("li",[a("p",[t._v("308 Permanent Redirect 永久重定向 重定向时不会改变method")])]),t._v(" "),a("li",[a("p",[t._v("400 Bad Request 错误请求")])]),t._v(" "),a("li",[a("p",[t._v("401 Unauthorized 需要用户身份认证")])]),t._v(" "),a("li",[a("p",[t._v("403 Forbidden 服务器拒绝")])]),t._v(" "),a("li",[a("p",[t._v("404 Not Found 服务器找不到资源")])]),t._v(" "),a("li",[a("p",[t._v("405 Method Not Allowed 请求中的方法被禁止")])]),t._v(" "),a("li",[a("p",[t._v("408 Request Time-out 请求超时")])]),t._v(" "),a("li",[a("p",[t._v("413 Request Entity Too Large 请求实体过大，服务器无法处理")])]),t._v(" "),a("li",[a("p",[t._v("429 Too Many Requests 接口请求次数超过限制")])]),t._v(" "),a("li",[a("p",[t._v("500 Internal Server Error 服务器内部错误")])]),t._v(" "),a("li",[a("p",[t._v("503 Service Unavailable 服务不可用 =》服务器维护")])]),t._v(" "),a("li",[a("p",[t._v("2开头都是成功")])]),t._v(" "),a("li",[a("p",[t._v("3开头都是重定向")])]),t._v(" "),a("li",[a("p",[t._v("4开头代表客户端错误")])]),t._v(" "),a("li",[a("p",[t._v("5开头代表服务器错误")])])]),t._v(" "),a("h3",{attrs:{id:"_4-get和post区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-get和post区别"}},[t._v("#")]),t._v(" 4.get和post区别？")]),t._v(" "),a("ul",[a("li",[t._v("get参数通过url传递，post参数通过请求体传递")]),t._v(" "),a("li",[t._v("get传递的参数有长度限制(浏览器限制或服务器限制)，post没有")]),t._v(" "),a("li",[t._v("get请求，浏览器把header和参数一起发送给服务器，而post浏览器会先发送\nheader，服务器返回100 continue，再发送参数(data)")])]),t._v(" "),a("h3",{attrs:{id:"_5-get和post请求在缓存上的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-get和post请求在缓存上的区别"}},[t._v("#")]),t._v(" 5.get和post请求在缓存上的区别？")]),t._v(" "),a("p",[t._v("get常用来获取数据，可以不用每次都查询数据库，所以适合做缓存，post常用来修改和删除数据，必须与数据库交互，所以不适合")]),t._v(" "),a("h3",{attrs:{id:"_6-tcp三次握手-建立连接-与四次挥手-断开连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-tcp三次握手-建立连接-与四次挥手-断开连接"}},[t._v("#")]),t._v(" 6.tcp三次握手(建立连接)与四次挥手(断开连接)？")]),t._v(" "),a("h4",{attrs:{id:"三次握手-握手不传递数据-等三次握手成功后才开始传输数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三次握手-握手不传递数据-等三次握手成功后才开始传输数据"}},[t._v("#")]),t._v(" 三次握手=>握手不传递数据，等三次握手成功后才开始传输数据")]),t._v(" "),a("ul",[a("li",[t._v("客户端先发送syn(syn=j，syn是同步序列编号)包到服务端，进入SYN_SENT状态")]),t._v(" "),a("li",[t._v("服务端收到后确认客户的syn(ack=j+1)，同时也发送一个syn包(syn=k，即syn+ack)给客户端，此时进入SYN_RECV状态")]),t._v(" "),a("li",[t._v("客户端收到服务端的syn包，向服务端发送确认ACK包(ack=K+1)，此时都进入ESTABLISHED(TCP连接成功)状态")])]),t._v(" "),a("h4",{attrs:{id:"四次挥手-》tcp规定fin报文即使不带数据-也消耗一个序号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四次挥手-》tcp规定fin报文即使不带数据-也消耗一个序号"}},[t._v("#")]),t._v(" 四次挥手=》tcp规定FIN报文即使不带数据，也消耗一个序号")]),t._v(" "),a("ul",[a("li",[t._v("客户端发送释放报文，(FIN=1，序列号为seq=u,u等于最后数据的最后一个字节序号+1)，此时客户端进入FIN-WAIT-1(终止等待1)状态")]),t._v(" "),a("li",[t._v("服务端收到后，发送确认报文，ack=1，ack=u+1，(并且带上自己的seq=v)，此时服务端进入了CLOSE-WAIT(关闭等待)状态\n客户端收到确认报文后，客户端进入FIN-WAIT-2(终止等待2)状态=>(在此之前服务端如果发送数据客户端还能接收到)")]),t._v(" "),a("li",[t._v("服务端将最后的数据发送完毕，向客户端发送释放报文，FIN=1，ack=u+1，服务端进入LAST-ACK(最后确认状态)")]),t._v(" "),a("li",[t._v("客户端收到服务端的释放报文后，发送确认报文，ack=1，ack=w+1，而自己的序列号是seq=u+1，此时客户端进入TIME-WAIT(时间等待)状态，\n等待2倍MSL(报文最大生存时间)后，客户端进入CLOSED状态")])]),t._v(" "),a("h3",{attrs:{id:"seq作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#seq作用"}},[t._v("#")]),t._v(" *seq作用？")]),t._v(" "),a("p",[t._v("seq是初始化序列号，这个序号作为后面通讯的序号，保证数据不乱序")]),t._v(" "),a("h4",{attrs:{id:"为什么两次握手就可以建立链接-还要第三次握手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么两次握手就可以建立链接-还要第三次握手"}},[t._v("#")]),t._v(" 为什么两次握手就可以建立链接，还要第三次握手？")]),t._v(" "),a("p",[t._v("双方都确认自己都发送和接收都是正常的\n=》为了防止失效的链接请求的报文段被服务端接收，从而产生错误(网络超时，由于超时重试的机制重发的被服务端收到了，但此时客户端已经变成close状态)")]),t._v(" "),a("h4",{attrs:{id:"为什么要等待2msl-msl报文最大生存时间-具体msl时间不一定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要等待2msl-msl报文最大生存时间-具体msl时间不一定"}},[t._v("#")]),t._v(" 为什么要等待2MSL(MSL报文最大生存时间，具体MSL时间不一定)")]),t._v(" "),a("p",[t._v("主要防止最后一个ack包对方没收到。2倍MSL就是一个发送和一个回复所需的最大时间")]),t._v(" "),a("h4",{attrs:{id:"为什么要四次挥手才能断开连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要四次挥手才能断开连接"}},[t._v("#")]),t._v(" 为什么要四次挥手才能断开连接？")]),t._v(" "),a("p",[t._v("因为TCP全双工，发送方和接收方都要FIN和ACK报文。")]),t._v(" "),a("h4",{attrs:{id:"全双工是指什么-半双工不能同时进行信号的双向传输"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全双工是指什么-半双工不能同时进行信号的双向传输"}},[t._v("#")]),t._v(" 全双工是指什么？(半双工不能同时进行信号的双向传输)")]),t._v(" "),a("p",[t._v("可以进行信号的双向传输。")]),t._v(" "),a("h4",{attrs:{id:"滑动窗口-流量控制-流量控制作用是防止传输速度太快缓冲区被填满-后续发送的数据都丢失"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#滑动窗口-流量控制-流量控制作用是防止传输速度太快缓冲区被填满-后续发送的数据都丢失"}},[t._v("#")]),t._v(" 滑动窗口=>流量控制(流量控制作用是防止传输速度太快缓冲区被填满，后续发送的数据都丢失)")]),t._v(" "),a("ul",[a("li",[t._v("滑动窗口是用来做流量控制的，在TCP中服务端和客户端都维护着窗口：发送端窗口和接收端窗口")]),t._v(" "),a("li",[t._v("发送端窗口包含已发送未收到应答的数据和可以发送但未发送的数据，发送端窗口由接收端窗口剩余大小决定的，接收方会把剩余大小写入应答报文，发送端根据应答报文设置窗口大小")])]),t._v(" "),a("h4",{attrs:{id:"拥塞控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拥塞控制"}},[t._v("#")]),t._v(" 拥塞控制？")]),t._v(" "),a("p",[t._v("主要作用于接收端，保证能来得及接收数据，防止过多的数据阻塞网络")]),t._v(" "),a("h4",{attrs:{id:"tcp-ip如何保证数据包传输的有序可靠"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-ip如何保证数据包传输的有序可靠"}},[t._v("#")]),t._v(" TCP/IP如何保证数据包传输的有序可靠？")]),t._v(" "),a("p",[t._v("对字节流进行分段和编号，通过ACK确认和超时重发来保证")]),t._v(" "),a("ul",[a("li",[t._v("发送方必须把已发送的数据保留在缓冲区，以保证数据包的可靠传输")]),t._v(" "),a("li",[t._v("并且为每个已发送的包启动一个定时器，如果定时器之前收到应答信息，释放缓冲区")]),t._v(" "),a("li",[t._v("否则，重传该数据包，直到收到应答或者超过规定的最大次数")]),t._v(" "),a("li",[t._v("接收方收到后，先进行CRC校验，正确把数据交给上层协议，然后给发送方一个应答(如果有数据要传给发送方，也可以带过去)")])]),t._v(" "),a("h3",{attrs:{id:"_7-tcp和udp区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-tcp和udp区别"}},[t._v("#")]),t._v(" 7.TCP和UDP区别？")]),t._v(" "),a("ul",[a("li",[t._v("TCP需要连接，UDP无连接。（UDP发送数据前不需要先建立连接）")]),t._v(" "),a("li",[t._v("TCP更可靠(重传机制=》发送数据时会设置一个定时器，超过指定时间没有收到对方ACK确认应答报文，就会重发)，UDP可能会丢失数据，不可靠")]),t._v(" "),a("li",[t._v("TCP只支持1对1传输，UDP不仅支持1对1，还支持1对多")]),t._v(" "),a("li",[t._v("*TCP有拥塞控制，UDP没有")])]),t._v(" "),a("h4",{attrs:{id:"用途"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用途"}},[t._v("#")]),t._v(" 用途：")]),t._v(" "),a("ul",[a("li",[t._v("TCP：电子邮件SMTP，终端连接SSH，文件传输FTP")]),t._v(" "),a("li",[t._v("UDP：域名解析DNS")])]),t._v(" "),a("h4",{attrs:{id:"tcp如何保证传输的可靠性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp如何保证传输的可靠性"}},[t._v("#")]),t._v(" tcp如何保证传输的可靠性？")]),t._v(" "),a("p",[t._v("超时重传机制=》发送数据时会设置一个定时器，超过指定时间没有收到对方ACK确认应答报文，就会重发")]),t._v(" "),a("h3",{attrs:{id:"_8-ajax是什么-有什么优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-ajax是什么-有什么优缺点"}},[t._v("#")]),t._v(" 8.ajax是什么，有什么优缺点？")]),t._v(" "),a("ul",[a("li",[t._v("ajax从名称翻译过来就是异步js和xml")]),t._v(" "),a("li",[t._v("优点：能在不刷新整个页面的情况下与服务器通信，与服务器通信是异步的")]),t._v(" "),a("li",[t._v("缺点：ajax不利于搜索引擎优化。如果请求慢会导致页面空白。=》服务端渲染")])]),t._v(" "),a("h4",{attrs:{id:"axios底层如何实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#axios底层如何实现"}},[t._v("#")]),t._v(" axios底层如何实现？")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var axios = {\n  get: function(url) {\n    return new Promise((resolve, reject) => {\n      var xhr = new XMLHttpRequest()l\n      xhr.open('GET', url, true);\n      xhr.onreadystatechange = function() {\n        if (xhr.readyState == 4 && xhr.status == 200) {\n          resolve(xhr.reponseText)  \n        }\n      }\n      xhr.send();\n    })\n  }\n}\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("h3",{attrs:{id:"_9-网络层有什么协议-udp在哪一层-各个层次的代表设备"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-网络层有什么协议-udp在哪一层-各个层次的代表设备"}},[t._v("#")]),t._v(" 9.网络层有什么协议？udp在哪一层，各个层次的代表设备？")]),t._v(" "),a("p",[t._v("从上往下")]),t._v(" "),a("ul",[a("li",[t._v("应用层：FTP，HTTP")]),t._v(" "),a("li",[t._v("表示层：URL编码")]),t._v(" "),a("li",[t._v("会话层：session，断点续传")]),t._v(" "),a("li",[t._v("传输层：UDP，TCP")]),t._v(" "),a("li",[t._v("网络层：IP，路由器，防火墙")]),t._v(" "),a("li",[t._v("数据链路层：网卡，网桥，交换机")]),t._v(" "),a("li",[t._v("物理层：集线器，中继器，网线")])]),t._v(" "),a("h3",{attrs:{id:"_10-跨域-》非简单请求-复杂请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-跨域-》非简单请求-复杂请求"}},[t._v("#")]),t._v(" 10.跨域=》非简单请求(复杂请求)？")]),t._v(" "),a("ul",[a("li",[t._v("如果请求方法是PUT或DELETE或Content-Type字段是application/json都是非简单请求")]),t._v(" "),a("li",[t._v("浏览器发现是非简单请求，会自动发送options请求(预检操作)，服务器检查origin之后确认允许跨域请求，浏览器才会发送正式的请求。后面就和简单请求一样，")]),t._v(" "),a("li",[t._v("cors的请求头会多出origin，响应头会多access-control-allow-origin\n(cors默认不发送cookie，开启需要服务端设置Access-Control-Allow-Credentials: true 客户端withCredentials = true)")])]),t._v(" "),a("h4",{attrs:{id:"复杂请求如何实现只预检一次"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复杂请求如何实现只预检一次"}},[t._v("#")]),t._v(" 复杂请求如何实现只预检一次？")]),t._v(" "),a("p",[t._v("后端设置access-control-max-age: 600=》设置一定时间内不用再预检")]),t._v(" "),a("h4",{attrs:{id:"简单请求定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单请求定义"}},[t._v("#")]),t._v(" 简单请求定义")]),t._v(" "),a("p",[t._v("同时满足：")]),t._v(" "),a("ul",[a("li",[t._v("请求方法是HEAD｜GET｜POST")]),t._v(" "),a("li",[t._v("HTTP头信息只有Accept|Accept-Language|Content-Language|Last-Event-ID|Content-Type\n=》其中Content-Type只允许application/x-www-form-urlencoded|multipart/form-date|text-plain")])]),t._v(" "),a("h3",{attrs:{id:"_11-todo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-todo"}},[t._v("#")]),t._v(" 11.//TODO")]),t._v(" "),a("h3",{attrs:{id:"_12-301-302状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-301-302状态码"}},[t._v("#")]),t._v(" 12.301，302状态码？")]),t._v(" "),a("p",[t._v("都表示重定向，301代表永久性，302是暂时性。302浏览器会保留旧的地址，301浏览器会把旧的地址替换成重定向后的地址")]),t._v(" "),a("ul",[a("li",[t._v("301会缓存 =》 用了301之后每次都会自定重定向到对应的地址")]),t._v(" "),a("li",[t._v("301用于更换域名 没有权限跳转到提示页可以用302")]),t._v(" "),a("li",[t._v("307临时重定向 重定向时不会改变method")]),t._v(" "),a("li",[t._v("308永久重定向 重定向时不会改变method")])]),t._v(" "),a("h3",{attrs:{id:"_14-http1-0-1-1-2-0-3-0区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-http1-0-1-1-2-0-3-0区别"}},[t._v("#")]),t._v(" 14.HTTP1.0/1.1/2.0/3.0区别？")]),t._v(" "),a("h4",{attrs:{id:"http1-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http1-1"}},[t._v("#")]),t._v(" http1.1")]),t._v(" "),a("ul",[a("li",[t._v("HTTP1.1支持长连接(默认开启Connection:Keep-Alive)")]),t._v(" "),a("li",[t._v("新增了状态码100(在post请求中有应用。先发送header等服务端返回100 continue才发送body)")]),t._v(" "),a("li",[t._v("协商缓存多了Etag/If-None-Match(1.0只有If-Modified-Since)")])]),t._v(" "),a("h4",{attrs:{id:"http2-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http2-0"}},[t._v("#")]),t._v(" http2.0")]),t._v(" "),a("ul",[a("li",[t._v("http1.1是通过文本传输，2通过二进制格式传输(传输帧和流)")]),t._v(" "),a("li",[t._v("http1.1有线头阻塞问题，一次连接如果提交多个请求效率比较低，http2采取多路复用解决(多个低速信道合并成一个高速信道，提高了传输效率)")]),t._v(" "),a("li",[t._v("压缩了headers(因为headers在请求中常常是相似的，压缩后可以提高传输速度)")]),t._v(" "),a("li",[t._v("http2支持主动向客户端推送内容")])]),t._v(" "),a("h4",{attrs:{id:"http2还存在什么问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http2还存在什么问题"}},[t._v("#")]),t._v(" HTTP2还存在什么问题？")]),t._v(" "),a("p",[t._v("http2解决了http线头阻塞的问题，但是没有解决tcp线头阻塞问题。\nhttp3解决的tcp线头阻塞问题，使用了QUIC协议(使TCP到UDP的网络转换上更加流畅=》减少TCP三次握手时间)")]),t._v(" "),a("h3",{attrs:{id:"_15-http常用请求头"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-http常用请求头"}},[t._v("#")]),t._v(" 15.http常用请求头？")]),t._v(" "),a("ul",[a("li",[t._v("accept 接受的内容类型 accept:text/plain\naccept-charset 接受的字符集 accept-charset: utf-8\naccept-encoding 接受的编码方式 accept-encoding: gzip")]),t._v(" "),a("li",[t._v('cache-control 缓存设置 cache-control: no-cache\nif-match 用来判断是否使用缓存 if-match: "737060cd8c284d8af7ad3082f209582d"\nif-modified-since 返回304为修改 if-modified-since: Sat, 29 Oct 1994 19:43:31 GMT\nif-none-match 返回304未修改 if-none-match: "737060cd8c284d8af7ad3082f209582d"\nif-unmodified-since 特定时间内未被修改 if-unmodified-since: Sat, 29 Oct 1994 19:43:31 GMT')]),t._v(" "),a("li",[t._v("connection 连接类型 connection: keep-alive")]),t._v(" "),a("li",[t._v("content-length 请求体长度 content-length: 300")]),t._v(" "),a("li",[t._v("date 发送该消息的日期和时间 date: Tue, 15 Nov 1994 08:12:31 GMT")]),t._v(" "),a("li",[t._v("expect 客户端要求服务器做出特殊行为 expect: 100-continue")]),t._v(" "),a("li",[t._v("origin 发起跨域资源共享的请求 需要服务端设置 origin: http://www.example-social-network.com")]),t._v(" "),a("li",[t._v("referer 表示浏览器所访问的前一个页面，由这个页面的某个链接带到当前页面 referer: http://zh.wikipedia.org/wiki/Main_Page")]),t._v(" "),a("li",[t._v("content-type 请求体的(MIME)类型")]),t._v(" "),a("li",[t._v("host 服务器域名及监听的端口号 host: zh.wikipedia.org:80")]),t._v(" "),a("li",[t._v("user-Agent 身份标识")]),t._v(" "),a("li",[t._v("via 告知服务器这个请求是由哪些代理发出的 via: 1.0 fred, 1.1 example.com (Apache/1.1)")])]),t._v(" "),a("h3",{attrs:{id:"_16-http常用响应头"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-http常用响应头"}},[t._v("#")]),t._v(" 16.http常用响应头？")]),t._v(" "),a("ul",[a("li",[t._v("Access-Control-Allow-Origin 指定哪些网站可以跨域资源共享 access-control-allow-origin: *")]),t._v(" "),a("li",[t._v("Age 响应对象在代理缓存中存在的时间，单位为秒 age: 13")]),t._v(" "),a("li",[t._v("Cache-Control 通知从服务器到客户端内的所有缓存机制，表示它们是否可以缓存这个对象及缓存时间，单位为秒 cache-control: max-age: 3600")]),t._v(" "),a("li",[t._v('content-disposition 让客户端下载文件并建议文件名 content-disposition: attachment; filename="a.txt"')]),t._v(" "),a("li",[t._v("content-encoding 数据上使用的编码类型 content-encoding: gzip")]),t._v(" "),a("li",[t._v("content-length 响应体长度 content-length: 50")]),t._v(" "),a("li",[t._v('etag 缓存标识符 etag: "737060cd8c284d8af7ad3082f209582d"')]),t._v(" "),a("li",[t._v("expires 缓存时间 expires: Thu, 01 Dec 1994 16:00:00 GMT")]),t._v(" "),a("li",[t._v("last-modified 最后修改日期 last-modified: Tue, 15 Nov 1994 12:45:26 GMT")]),t._v(" "),a("li",[t._v("location 重定向 location: http://www.w3.org/pub/WWW/People.html")]),t._v(" "),a("li",[t._v("set-cookie 设置cookie set-cookie: UserID=JohnDoe; Max-Age=3600; Version=1")]),t._v(" "),a("li",[t._v("via 告诉客户端，响应是从哪里发出的 via: 1.0 fred, 1.1 example.com (Apache/1.1)")])]),t._v(" "),a("h3",{attrs:{id:"_17-ajax解决浏览器缓存问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-ajax解决浏览器缓存问题"}},[t._v("#")]),t._v(" 17.ajax解决浏览器缓存问题？")]),t._v(" "),a("ul",[a("li",[t._v("发送前加上setRequestHeader('If-Modified-Since','0')")]),t._v(" "),a("li",[t._v("发送前加上setRequestHeader('Cache-Control', 'no-cache')")]),t._v(" "),a("li",[t._v("url后面添加一个随机数fresh+=Math.random()")])]),t._v(" "),a("h3",{attrs:{id:"_18-fetch和axios区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18-fetch和axios区别"}},[t._v("#")]),t._v(" 18.fetch和axios区别？")]),t._v(" "),a("ul",[a("li",[t._v("fetch由浏览器提供，axios是社区封装XHR")]),t._v(" "),a("li",[t._v("fetch不支持进度检测，axios支持")]),t._v(" "),a("li",[t._v("axios可以自动转换JSON数据，fetch需要手动处理")]),t._v(" "),a("li",[t._v("axios可以防止CSRF")]),t._v(" "),a("li",[t._v("axios拦截器，拦截请求")])]),t._v(" "),a("h4",{attrs:{id:"fetch的credentials作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fetch的credentials作用"}},[t._v("#")]),t._v(" fetch的credentials作用？")]),t._v(" "),a("p",[t._v("发送请求时是否应当发送cookie")]),t._v(" "),a("ul",[a("li",[t._v("omit 从不发送")]),t._v(" "),a("li",[t._v("same-origin 同源时发送(默认值)")]),t._v(" "),a("li",[t._v("include 同源和跨域都发送")])])])}),[],!1,null,null,null);a.default=s.exports}}]);